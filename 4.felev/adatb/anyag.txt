Adatbázisrendszerek megvalósítása I.


1) Hierarchikus
            [] <- gyökér
  ___________|___________
 |           |           |
 []         []          [] <-levél elemek

 2) Hálós

[]----[]
|\   /|
|  V  |
|  ^  |
|/   \|
[]   []

3) Relációs adatmodell

//Hiányzik az ábra

Tranzakció
 - Az adatbázis-művelet végrehajtási egysége.
 - Egy vagy több DML utasítást tartalmaz.
 - Tulajdonságok
  A  - Atomosság (Atomicity): mindent vagy semmit elvű végrehajtás.
  C  - Konzisztencia (Consistency): konzisztens állapotból konzisztens állapotba vezet.
  I  - Elkülönítés (Isolation): végrehajtásának úgy kell történnie, mintha egy időben csak az aktív tranzakció végrehajtása folyna.
  D  - Tartósság (Durability): Hatását meg kell őrizze az adatbázis.

Adatbázis-kezelő rendszer alkotórészei
- Parancsforrások
  - Adatbázis-adminisztrátor
    - DDL utasítás
  - Felhasználó/alkalmazás
    - DML utasítás
    - QL utasítás

Memóriahierarchia
|\ Regiszter
| \ Gyorsítótás
|  \ Központi memória
|   \ Másodlagos tárolók (lemez) Fájlrendszer + virtuális memória
|____\ Harmadlagos tárolók

Lemezvezérlő
_____________________________________________________
Adatsín
_____________________________________________________
      ^
      |
      ˇ
  Központi memória

Hibák fajtái
  1. Hibás adatbevitel
  2. Készülékhiba
  3. Katasztrofális hiba
  4. Rendszerhiba

Hibás adatbevitel
  - Nehéz felismerni, mivel számos hiba jelentkezhet adatbevitel során.
    -Formai hibák
    - Jelentésbeli hibák
  - Az adatbáziskezelő-rendszerek szoftverelemeket biztosítanak a hibás adatbevitel minimálisra csökkentése érdekében.
    - Megszorítások
    - Triggerek (kioldók)

Megszorítások
  - Olyan előírások, korlátozások, amelyekkel megadhatjuk az adatbázis tartalmára vonatkozó elvárásainkat.
  - Minden olyan esetben ellenőrzésre kerül, amely eredményként az adatbázis tartalma úgy változhat, hogy az a megszorítást már nem elégítené ki.
  - Típusai
    - Oszlopmegszorítás (NOT NULL)
    - Táblamegszorítás(UIQUE,PRIMARY KEY, FOEREIGN KEY, CHECK)

Triggerek
- Olyan tevékenységsort definiál, amely automatikusan megy végbe valamilyen előre meghatározott felhasználói vagy rendszeresemény bekövetkezésekor.
- Egy trigger működését a következő események válthatják ki:
  - egy táblán vagy nézeten végrehajtott INSERT, DELETE, vagy UPDATE utasítás;
  - egyes DDL utasítások;
  - szerverhibák;
  - felhasználói be és kijelentkezés;
  - adatbázis elindítása és leállítása;

Triggerek Típusai
- A triggerek lefutásának száma szerint
  - sor szintű és
  - utasítás szintű
A trigger lefutásának ideje szerint
  -BEFORE és
  -AFTER trigger;
INSTEAD OF trigger
-Rendszertriggerek
  -Felhasználói események
  - Rendszeresemények

Triggerek használati esetei

//HIÁNYZÓ DIA

Készülékhiba

- A lemezegység néhány bites (szektoros) meghibásodásától a lemez teljes olvashatatlanságáig terjedő hibák
- A hiba kezelése a hiba mértékétől függően történhet:
	- Ellenőrző összegek használatával
	- RAID módszerrel
	- Archiválással
	- Elosztott, online adatbázismásolatok
	
Lemezhibák
1. Ideiglenes meghibásodás: Egy szektor írása/olvasása sikertelen, de a művelet kellően sokszori megismétlése megoldja a korábban felmerül írási/olvasási problémát.
2. Írási hiba: Egy suektor tartalmának írása sikertelen és a szektor tartalmát sem lehet már visszaállítani.
3. Eszközhiba: Egy vagy több bit végleges meghibásodásának köszönhetően a teljes szektor olvashatatlanná válik.
4. Lemezhiba: A lemez teljes tartalma végérvényesen olvashatatlanná és írhatatlanná válik.

Ideiglenes meghibásodás
- A lemezszektorokat redundáns bitekkel együtt szokás tárolni -> Segítségükkel megmondható, hogy a lemezművelet sikeres volt-e.
- A lemezművelete során státuszbiteket alkalmazunk:
	- Olvasási függvény esetén megmutatja, hogy sikerült-e az olvasás.
	- Írási függvény esetén megmutatja, hogy sikerült-e a szektor írása.
- Státuszbit előállítása -> ellenörző összegek használata:
	- Paritásbit használata

Paritásbit képzés
- Értéke 1, ha a bitsorozat páratlan számú 1-es bitet tartalmaz.
- Értéke 0, ha a bitsorozat páros számú 1-es bitet tartalmaz.
	
	Egy bitsorozatnak és a hozzá tartozó paritásbitek között páros számú 1-es bit található meg
	Ha n független bitet használunk ellenőrző összegként, akkor annak esélye, hogy nem veszünk észre hibát, 1/2^n

- A hibadeklarálásra alkalmas, de annak kezelésére nem.

Stabil tárolása
- A paritásbit nem segít a hiba elhárításában, csupán annak felismerését teszi lehetővé nagy valószínűséggel.
- Szektorpárokat készítünk: X (szektor) -> XL (bal másolat), XR (jobb másolat).
- Feltesszük, hogy az olvasási függvény mindig jó státuszbitet adjon vissza.
	- Annyi paritásbitet használunk, hogy minden kis hiba...
...........

Stabil tárolás - írási elv

1. Írjunk X értéket a bal másolatba mindaddig míg a státuszbit helyes nem lesz.
Sok sikertelen próbálkozás után feltesszük, hogy a szektor hibás, ekkor javító módszert használunk, például egy új szektorral helyettesítjük a bal másolatot.
2. Ismételjük meg az 1. pontot a jobb oldali másolatra

Lemezhibák helyreállítása
- Lemezek meghibásodási modellje
	- Az életciklus korai szakaszában sok lemezhiba jelentkezik.
	- Az életciklus későbbi szakaszaiban több tényezp kölcsönös hatásként növekszik a meghibásodás esélye.
	
		Redundáns tárolás segítségével kivédhető a lemezek meghibásodása.
		
		RAID (független lemezek redundáns tömbje)


