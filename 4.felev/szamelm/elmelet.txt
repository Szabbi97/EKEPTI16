Számításelmélet EA

Jegyzet: https://elearning.uni-eszterhazy.hu/course/view.php?id=410

Algoritmusok bonyolultsága

Bonyolultság elmélet (Complexity Theory)
- Algoritmusok bonyolultsága
  - időbonyolultság -> elemi lépések száma
  - tárbonyolultság -> memóriaigény

- Minden lehetséges inputra?
  - És, ha végtelen input létezik?

- Legrosszabb esetre
  - "Worst-case complexity"
  - Melyik a legrosszabb lehetőség az algoritmusnak?

Keresési algoritmusok időbonyolultsága

- Pl. lineáris keresés, bináris Keresési
- Legrosszabb esetben hány elemi lépés?
- Elemi lépés = összehasonlítás


- n adatelemre = n hosszúságú inputra

- Lineáris keresés:
  - legrosszabb esetben: n összehasonlítás
  - időbonyolultság: O(n) összehasonlítás

- Bináris keresés:
  - legrosszabb esetben: [logˇ2(n+1)]
  - időbonyolultság: O(logˇ2(n))

Bonyolultsági függvények

- Logaritmikus: O(logˇc(n))
- Lineáris: O(n)
- Polinomiális: O(n^k)
  - Négyzetes: O(n^2)
  - Köbös: O(n^3)
- Exponenciális: O(c^n)
- Faktoriális: O(n!)
- Dupla exponenciális: O(c^(d^n))
- stb.

Rendezési algoritmusok időbonyolultsága

- Probléma: Rendezzük egy n elemű tömb elemeit (növekvő) sorrendbe!

- Legrosszabb esetben hány lemei lépés?

- Elemi lépések
  ITT KIMARADT KÉT PONT

Rendezési algoritmusok

Az alábbi algoritmusokat vizsgáljuk

- Buborék rendszés
  KÓD
  for (i=n-i; i>0; i--)
  {
    for (j=0; j<i; j++)
    {
      if(T[j+1] < T[j])
        swap(T[j+1], T[j]);
    }
  }

  Összehasonlítások száma: minden esetben ((n-1)*n)/2
  Elemcserék száma: legrosszabb esetben ((n-1)*n)/2
  Összesen: legrosszabb esetben ((n-1)*n)
  Bonyolultság: O(n^2)

- Beszúrásos Rendezési
  - lineáris kereséssel
  - bináris kereséssel

- Összefésüléses rendezés


Algoritmus modellek

- Turing-gép
- Rekurzív függvények - Kleene (1936)
	- alapfügvgvények + rekurzió
	- való életben: funkcionális programozási nyelvek (pl. LISP)

- Lambda-kalkulus - Church (1941)
	- absztrakt függvények és azok alkalmazása
	- való életben: lambda kifejezések (pl c#-ban)
- Markov algoritmus - Markov (1961)
	- formális nyelvi megközelítés
	- ...
...
...


- 1950-es évek lelkesedése
- Minden problémára van megoldó algoritmus?

- Church-Turing tézis:
	- a Turing-gép képes minden kiszámítható függvényt kiszámítani

- Church-Turing tétel:
	-vannak Turing-géppel ki nem számítható függvények
	
Turing-gép

2 fő alkatrész:
	- Vezérlő:
		- Egyetlen információ: Aktuálisan melyik lehetséges állapotában van?
		- Lehetséges belső állapotainak halmaza: Q
	- Szalag:
		- Cellákból áll, végtelen.
		- Az író-olvasó fej aktuálisan az egyik cella felett áll.
		- Betűk (=szalagjelek) halmaza: Σ
		- Van két állapotjel: ▷,
	- Jelölések:
			T = <Σ,Q,q0,F,δ>
		- Σ: szalagjelek (betűk) halmaza
		- Q: állapotok halmaza
		- q0: kezdőállapot
		- F: elfogadó állapotok halmaza
		- δ: (állapot)átmenetfüggvény
		
Bemenő paraméterei:
	- Aktuális állapot: q \in Q
	- Aktuálisan olvasott betű: o \in Σ

Visszaadott értékei (mindhárman):
	- Következő állapot: q' \in Q
	- A cellára visszaírandó betű: o' \in Σ
	- Merre mozduljon a fej: m \in {<-,-,->}
	
Átmenetfüggvény

Tehát az átmenetfüggvény így paraméterezhető és ilyen értékhármast ad vissza: 
			δ(q,o) = (q', o', m)
ahol 
..............................


Készíts egy Turing-gépet, amely egy bináris számról eldönti, hogy páros-e!


..................................................................................................................

Turing-gép - Konfiguráció

- Milyen állapotban van a vezérlője? q eleme Q

1 inputra hány lépést végez a Turing Gép?

(q0, |>, input (pl.: bab))


