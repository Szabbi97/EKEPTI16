Ajánlott olvasmámny:
-Robert C. Martin - Tiszta kód
-Robert C. Martin - Túlélőkönyv programozóknak
-Robert C. Martin - PPP könyv
-GOF (Gang Of Four) - Design Patterns
-GOF - Head First Design Pattern

Unit teszt:
-rögzíti a bemenatet
-rögzíti az elvárt kimenetet
-meghívja a metódust a rögzített bemenettel és így kap egy aktuális kimenetet
-a unit teszt sikeres, ha az elvár és az aktuális kimenet megegyezeik.
-minden változás után le kell futtatni a regressziós tesztet -> lefuttatom az összes unit tesztet


P         P                 P
Practices Principles Design Patterns

//Mohó, szálbiztos Singleton
//Greedy threadsafe Singleton

class Singleton
{
  private Singleton(){}
  public static Singleton getInstance()
  {
    return instance;
  }
  private static Singleton instance = new Singleton();
}

//Lusta, nem szálbiztos Singleton
//Lazy not threadsafe Singleton

class Singleton
{
  private Singleton(){}
  public static Singleton getInstance()
  {
    return instance;
  }
  private static Singleton instance;
}

LAZY - Csak akkor csinálom meg, ha nagyon muszáj.
GREEDY - Azonnal megcsinálja amint lehetősége van.


ISMÉTLÉS

Az OOP-nek 3 azaz 4 alapelve van.
A három alapelv:
-Egységbe zárás (Encapsulation)
-Öröklődés (Inharitance)
-Többalakúság (Polymorphism)

Öröklődés
A gyermekösztály az ősosztály minden változóját és metódusát megörökli.
A gyermekosztály megörökli az ősosztály felületét és megvalósítását, ugyanakkor nincs garancia arra, hogy viselkedésében megfelel az ősosztálynak.

---------------------------------------------------------------------------------------------------------------------------------------------------

Gráfkereső algoritmusok

Nem módosítható
- Csak operátor módosíthatja az adatbázist
- Próba-hiba módszer (Trial-and-error)
- Hegymászó algoritmus

Módosítható
- Operátorokon kívül van egy metódus ami szintén módosíthatja az adatbázist.
	- Visszalépéses keresés "backtrack"
	- kereső fával keresők
	
	
Gráfkereső algoritmusok közös váza

Minden gráfkereső algoritmushoz a következő három kérdést tesszük fel:
1. Ha van megoldás, megtalálja?
2. Ha nincs megoldás, felismeri?
3. Ha talál megoldást, az optimális?
4. Ha a 3. válasz igen: Milyen értelemben optimális?

- Adatbázis (adatszerkezet, ami a memóriában van)

- Inicializálés: Kezdőállapot megadása, felsorolom a kezdőértékeket

- Ciklus/vezértlő: Ez egy végtelen ciklus, amelyben felépítjük a gráfot.
	- Pozitív kilépési feltétel, ha megtaláltam a megoldást
	- Negatív kilépési feltétel, amikor biztos vagyok abban, hogy nem talált megoldást.

- Adatbázis módosítás


Nem módosítható gráfkereső algoritmus

Zsákutca: Olyan csúcs, amibe bevezető él van, de kivezető él nincs.

Az adatbázisban csak az aktuális csúcs van.

Két algoritmus:
	- 
	
A heurisztika abban segít, hogy, ha van több alkalmazható operátorom, azaz egy csúcsból több élen is elindulhatok, akkor a heurisztika segít eldönteni, hogy melyiken induljak el.
Próba-hibánál véletlenszerűen választok, hegymászó algoritmusnál pedig heurisztikával.
A "Look-a-head" mindegyik alkalmazható operátorról megbecsüli, hogy mennyire közel visz a célhoz és azt választja, amelyik közelebb visz.

A heurisztikától elvárt, hogy gyors legyen.

Próba-hiba módszer

Adatbázis: Az aktuális csúcs
Inicializálés: Az aktuális csúcs legyen a start csúcs, a start csúcs tartalmazza a kezdőállapotot
Ciklus: - Kiíratom az aktuális csúcsot.
		- Az aktuális csúcsra alkalmazok egy alkalmazható operátort azaz az aktuális élen alkalmazható csúcsok közül valamelyiken továbbmegyek,
			ha több lehetőségem is van, véletlenszerűen választok.
        - Az így előálló új csúcs legyen az aktuális.
		- Az aktuális csúcsban van egy állapot, ennek vannak alkalmazható operátorai.
			Ezek közül választok egyet véletlenszerűen, azt alkalmazom, így létrejön egy új állapot.
			Ezt az állapotot becsomagolom egy csúcsba, ekkor létrejön egy új csúcs, az utolsó lépés: akt = új csúcs.
		- Pozitív kilépési felétel: Ha az aktuális csúcs terminális csúcs, akkor meg van a megoldás, a megoldás adódik az eddig kiírt csúcsok sorrendjében.
		- Negatív kilépési feltétel: Ha az aktuális csúcs zsákutca, akkor nincs megoldás, kiírom, hogy nem találtam megoldást.
		

1. Ha van megoldás, megtalálja?
	Minél jobb a heurisztika, annál valószínűbb.
2. Ha nincs megoldás, felismeri?
	Nem.
3. Ha talál megoldást, az optimális?
	Nem valószínű.
4. Ha a 3. válasz igen: Milyen értelemben optimális?

Restartos Próba-hiba módszer.

Ha zsákutcába jut, újraindítja a keresést a start csúcsból.
Az eddig feltárt zsákutcákat kizárjuk a keresési térből.
A maximális újraindítások számát általában ezernek veszem.
Addi indítgatok újra, míg megtalálom a megoldást, vagy elérem a maximális újraindítások számát.

1. Ha van megoldás, megtalálja?
	Tart a végtelenhez, ha a maximális újraindítások száma tart a végtelenhez.
2. Ha nincs megoldás, felismeri?
	
3. Ha talál megoldást, az optimális?
4. Ha a 3. válasz igen: Milyen értelemben optimális?

Restartos hegymászó algoritmus

Használ heurisztikát, determinisztikussá teszi az algoritmusomat, azaz mindig ugyanarra fog menni.
Csak úgy tudom használni a resteartot:
	- Az feltárt zsákutcákat kizárom a keresési térből, azaz, ha már egyszer befutottam egy zsákutcába, mégegyszer nem engedem be a keresést -> törlöm a gráfból az élt. (Random-walk)
	- A heurisztikába teszek véletlen elemeket, pl: a kiszámolt értéket megszorzom 0,5-1 közötti véletlen számmal. A jó heurisztika olyan, ami az elején jó irányba visz.

	
--------------------------------------------------------------------------------------------------------------------------

Gráfkereső algoritmusok

- Nem módosítható
	- nincs technikai művelet
- Módosítható
	- Van technikai művelet
		-Visszalépéses keresés (backtrack)
		- Keresőfával keresők

Visszalépéses keresés: Ha zsákutcába jutok, akkor visszalépek a zsákutca szülőcsúcsába, ezártal kijövök a zsákutcából.

Adatbázis: Az aktuális út.

1. Ha van megoldás, megtalálja?
	Nem, csak abban az esetben, ha a gráf körmentes. Sőt, ha a gráfban van kör, elképzelhető, hogy a backtrack végtelen ciklusba esik.
2. Ha nincs megoldás, felismeri?
	Nem.
3. Ha talál megoldást, az optimális?
	Nem valószínű.
4. Ha a 3. válasz igen: Milyen értelemben optimális?


Mélységi korlátos Backtrack

Adatbázis: ugyanaz, mint a sima backtrack-nél.

Inicializálés: Ugyanaz, mint a sima backtrack-nél. Mélységi korlátot megfelelően nagyra választani.

Ciklus: ugyanaz, mint a sima backtrack-nél.

Pozitív kilépési feltétel: ugyanaz, mint a sima backtrack-nél.

Negatív kilépési feltétel: ugyanaz, mint a sima backtrack-nél.

Technikai művelet: Ha az aktuális csúcs zsákutca, vagy az aktuális csúcs mélysége >= mint a mélységi korlát, akkor visszalépés, azaz Akt = Akt.szülő.

1. Ha van megoldás, megtalálja?
	Igen, de csak a mélységi korlát felett.
2. Ha nincs megoldás, felismeri?
	Igen, de csak a mélységi korlát felett.
3. Ha talál megoldást, az optimális?
	Nem valószínű.


Körfigyeléses Backtrack

Adatbázis: ugyanaz, mint a sima backtrack-nél.

Inicializálés: Ugyanaz, mint a sima backtrack-nél. Mélységi korlátot megfelelően nagyra választani.

Ciklus: ugyanaz, mint a sima backtrack-nél.

Pozitív kilépési feltétel: ugyanaz, mint a sima backtrack-nél.

Negatív kilépési feltétel: ugyanaz, mint a sima backtrack-nél.

Technikai művelet: Ha az aktuális csúcs zsákutca vagy az aktuális csúcs állapota már szerepel valamelyik előző csúcsban, akkor visszalépés, azaz Akt = Akt.szülő.
				   Abban az esetben, ha az állapot sok adattal jellemezhető, akkor nem összehasonlítom a két állapotot, csak a hash kódját hasonlítom össze.

1. Ha van megoldás, megtalálja?
	Igen, mert szisztematikus és van benne körfigyelés. Szisztematikus, mert legrosszabb esetben az egész keresési teret felderíti.
2. Ha nincs megoldás, felismeri?
	Igen, mert szisztematikus és van benne körfigyelés.
3. Ha talál megoldást, az optimális?
	Nem valószínű.
	
	
Körfigyeléses mélységi korlátos backtrack

Adatbázis: ugyanaz, mint a sima backtrack-nél.

Inicializálés: Ugyanaz, mint a sima backtrack-nél. Mélységi korlátot megfelelően nagyra választani.

Ciklus: ugyanaz, mint a sima backtrack-nél.

Pozitív kilépési feltétel: ugyanaz, mint a sima backtrack-nél.

Negatív kilépési feltétel: ugyanaz, mint a sima backtrack-nél.

Technikai művelet: Ha a keresés eléri a mélységi korlátot, vagy az aktuális csúcs állapota már szerepel valamelyik előző csúcsban, akkor visszalépés, azaz Akt = Akt.szülő.
				   Abban az esetben, ha az állapot sok adattal jellemezhető, akkor nem összehasonlítom a két állapotot, csak a hash kódját hasonlítom össze.

1. Ha van megoldás, megtalálja?
	Igen, mert szisztematikus és van benne körfigyelés. Szisztematikus, mert legrosszabb esetben az egész keresési teret felderíti.
2. Ha nincs megoldás, felismeri?
	Igen, mert szisztematikus és van benne körfigyelés.
3. Ha talál megoldást, az optimális?
	Nem valószínű.
	
Ág-korlátos backtrack (Branch-cut searching)




