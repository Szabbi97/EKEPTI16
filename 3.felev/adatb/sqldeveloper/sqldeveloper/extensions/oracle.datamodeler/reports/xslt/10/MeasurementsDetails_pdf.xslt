<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2011 rel. 3 sp1 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="osdm_mr" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-112810512-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-112810512-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-112810512-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-112810512-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-112810512-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-112810512-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-112810512">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-112810512-even-first" odd-or-even="even" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-112810512-odd-first" odd-or-even="odd" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-112810512-even-last" odd-or-even="even" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-112810512-odd-last" odd-or-even="odd" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-112810512-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-112810512-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:template match="/">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:declarations>
				<x:xmpmeta xmlns:x="adobe:ns:meta/">
					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
						<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
							<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2011 rel. 3 sp1 (http://www.altova.com)</xmp:CreatorTool>
						</rdf:Description>
					</rdf:RDF>
				</x:xmpmeta>
			</fo:declarations>
			<fo:page-sequence force-page-count="no-force" master-reference="page-master-112810512" initial-page-number="auto" format="1">
				<fo:static-content flow-name="odd-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" font-style="normal" font-weight="normal" width="100%" table-layout="fixed" border-spacing="2pt">
								<fo:table-column column-width="70%"/>
								<fo:table-column column-width="30%"/>
								<xsl:variable name="altova:CurrContextGrid_081D4510" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row height="0.03cm">
											<fo:table-cell padding="2pt" display-align="center">
												<fo:block text-align="left">
													<fo:inline>
														<xsl:text>Oracle Data Modeler</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell padding="2pt" display-align="center">
												<fo:block text-align="right">
													<fo:inline>
														<xsl:text>Page: </xsl:text>
													</fo:inline>
													<fo:page-number/>
													<fo:inline>
														<xsl:text> / </xsl:text>
													</fo:inline>
													<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="even-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" font-style="normal" font-weight="normal" width="100%" table-layout="fixed" border-spacing="2pt">
								<fo:table-column column-width="70%"/>
								<fo:table-column column-width="30%"/>
								<xsl:variable name="altova:CurrContextGrid_081D4510" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row height="0.03cm">
											<fo:table-cell padding="2pt" display-align="center">
												<fo:block text-align="left">
													<fo:inline>
														<xsl:text>Oracle Data Modeler</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell padding="2pt" display-align="center">
												<fo:block text-align="right">
													<fo:inline>
														<xsl:text>Page: </xsl:text>
													</fo:inline>
													<fo:page-number/>
													<fo:inline>
														<xsl:text> / </xsl:text>
													</fo:inline>
													<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:flow flow-name="xsl-region-body">
					<fo:block font-family="Tahoma" font-size="xx-small" empty-cells="show" text-align="left" display-align="before">
						<fo:inline-container>
							<fo:block>
								<xsl:text>&#x200B;</xsl:text>
							</fo:block>
						</fo:inline-container>
						<fo:block text-align="center" space-before="0" space-after="0" margin="0pt">
							<fo:inline font-size="medium" font-weight="bold">
								<xsl:text>Measurements Details</xsl:text>
							</fo:inline>
						</fo:block>
						<fo:block>
							<fo:leader leader-pattern="space"/>
						</fo:block>
						<xsl:for-each select="$XML">
							<xsl:for-each select="n1:root">
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table width="20cm" table-layout="fixed" border-spacing="0">
									<fo:table-column column-width="4cm"/>
									<fo:table-column column-width="16cm"/>
									<xsl:variable name="altova:CurrContextGrid_080BE5A8" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Design Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_08028AD8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_08028AD8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_08028AD8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_08028AD8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:DesignName) &gt; 0">
																		<xsl:for-each select="n1:DesignName">
																			<xsl:variable name="value-of-template_09B9C560">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_09B9C560),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_09B9C560"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_09B9C560"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_06B89550">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_06B89550),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_06B89550"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_06B89550"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_07E84288">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_07E84288),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_07E84288"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_07E84288"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_0803DFC8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0803DFC8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0803DFC8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0803DFC8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Version Date</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_09B572D8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_09B572D8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_09B572D8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_09B572D8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:VersionDate) &gt; 0">
																		<xsl:for-each select="n1:VersionDate">
																			<xsl:variable name="value-of-template_0AA09BE0">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0AA09BE0),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0AA09BE0"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0AA09BE0"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_09B1D700">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_09B1D700),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_09B1D700"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_09B1D700"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_08438EB8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_08438EB8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_08438EB8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_08438EB8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_09B44B80">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_09B44B80),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_09B44B80"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_09B44B80"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Version Comment</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:VersionComment">
																	<xsl:for-each select="n1:VersionCommentDetails">
																		<xsl:for-each select="n1:VersionCommentRow">
																			<xsl:variable name="value-of-template_084F3408">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_084F3408),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_084F3408"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_084F3408"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																		<xsl:for-each select="n1:VersionComment">
																			<xsl:for-each select="n1:VersionCommentDetails">
																				<xsl:for-each select="n1:VersionCommentRow">
																					<xsl:variable name="value-of-template_084D8480">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084D8480),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084D8480"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084D8480"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																		<xsl:for-each select="n1:VersionComment">
																			<xsl:for-each select="n1:VersionCommentDetails">
																				<xsl:for-each select="n1:VersionCommentRow">
																					<xsl:variable name="value-of-template_084F2C28">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084F2C28),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084F2C28"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084F2C28"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise/>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:VersionComment">
																	<xsl:for-each select="n1:VersionCommentDetails">
																		<xsl:for-each select="n1:VersionCommentRow">
																			<xsl:variable name="value-of-template_09B45338">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_09B45338),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_09B45338"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_09B45338"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:VersionComment">
																	<xsl:for-each select="n1:VersionCommentDetails">
																		<xsl:for-each select="n1:VersionCommentRow">
																			<xsl:variable name="value-of-template_084F8498">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_084F8498),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_084F8498"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_084F8498"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Model Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_09B48768">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_09B48768),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_09B48768"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_09B48768"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:ModelName) &gt; 0">
																		<xsl:for-each select="n1:ModelName">
																			<xsl:variable name="value-of-template_084D9978">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_084D9978),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_084D9978"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_084D9978"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_06A77478">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_06A77478),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_06A77478"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_06A77478"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_084F98C8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_084F98C8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_084F98C8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_084F98C8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_084EDAC0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_084EDAC0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_084EDAC0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_084EDAC0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<xsl:for-each select="n1:MCollection">
									<xsl:for-each select="n1:MDetails">
										<fo:block>
											<fo:leader leader-pattern="space"/>
										</fo:block>
										<fo:inline>
											<xsl:text>&#160;</xsl:text>
										</fo:inline>
										<fo:inline-container>
											<fo:block>
												<xsl:text>&#x200B;</xsl:text>
											</fo:block>
										</fo:inline-container>
										<fo:table width="15cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="11cm"/>
											<xsl:variable name="altova:CurrContextGrid_0A5557A8" select="."/>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Measurement Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell background-color="#a5e7ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<fo:block>
																			<fo:leader leader-pattern="space"/>
																		</fo:block>
																		<fo:inline-container>
																			<fo:block>
																				<xsl:text>&#x200B;</xsl:text>
																			</fo:block>
																		</fo:inline-container>
																		<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																			<xsl:for-each select="n1:MName">
																				<xsl:variable name="value-of-template_081C2630">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_081C2630),'&#x200B;')">
																						<fo:block font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_081C2630"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_081C2630"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</fo:block>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:MName) &gt; 0">
																				<fo:inline-container>
																					<fo:block>
																						<xsl:text>&#x200B;</xsl:text>
																					</fo:block>
																				</fo:inline-container>
																				<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																					<xsl:for-each select="n1:MName">
																						<xsl:variable name="value-of-template_084EA140">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_084EA140),'&#x200B;')">
																								<fo:block font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_084EA140"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_084EA140"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<fo:inline-container>
																			<fo:block>
																				<xsl:text>&#x200B;</xsl:text>
																			</fo:block>
																		</fo:inline-container>
																		<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																			<xsl:for-each select="n1:MName">
																				<xsl:variable name="value-of-template_084EE5E8">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_084EE5E8),'&#x200B;')">
																						<fo:block font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_084EE5E8"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_084EE5E8"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</fo:block>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<fo:inline-container>
																			<fo:block>
																				<xsl:text>&#x200B;</xsl:text>
																			</fo:block>
																		</fo:inline-container>
																		<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																			<xsl:for-each select="n1:MName">
																				<xsl:variable name="value-of-template_084D49C0">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_084D49C0),'&#x200B;')">
																						<fo:block font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_084D49C0"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_084D49C0"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</fo:block>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<fo:inline-container>
																			<fo:block>
																				<xsl:text>&#x200B;</xsl:text>
																			</fo:block>
																		</fo:inline-container>
																		<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																			<xsl:for-each select="n1:MName">
																				<xsl:variable name="value-of-template_09B57028">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_09B57028),'&#x200B;')">
																						<fo:block font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_09B57028"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_09B57028"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</fo:block>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Comment</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:MComment">
																			<xsl:for-each select="n1:MCommentDetails">
																				<xsl:for-each select="n1:MCommentRow">
																					<xsl:variable name="value-of-template_084E0698">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084E0698),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084E0698"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084E0698"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:MComment/n1:MCommentDetails/n1:MCommentRow) &gt; 0">
																				<xsl:for-each select="n1:MComment">
																					<xsl:for-each select="n1:MCommentDetails">
																						<xsl:for-each select="n1:MCommentRow">
																							<xsl:variable name="value-of-template_084E0168">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_084E0168),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_084E0168"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_084E0168"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:MComment/n1:MCommentDetails/n1:MCommentRow) &gt; 0">
																				<xsl:for-each select="n1:MComment">
																					<xsl:for-each select="n1:MCommentDetails">
																						<xsl:for-each select="n1:MCommentRow">
																							<xsl:variable name="value-of-template_084DFC10">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_084DFC10),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_084DFC10"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_084DFC10"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise/>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:MComment">
																			<xsl:for-each select="n1:MCommentDetails">
																				<xsl:for-each select="n1:MCommentRow">
																					<xsl:variable name="value-of-template_084DF468">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084DF468),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084DF468"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084DF468"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:MComment">
																			<xsl:for-each select="n1:MCommentDetails">
																				<xsl:for-each select="n1:MCommentRow">
																					<xsl:variable name="value-of-template_09B3DF40">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09B3DF40),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09B3DF40"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09B3DF40"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Notes</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:MNotes">
																			<xsl:for-each select="n1:MNotesDetails">
																				<xsl:for-each select="n1:MNoteRow">
																					<xsl:variable name="value-of-template_084D38D0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084D38D0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084D38D0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084D38D0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:MNotes/n1:MNotesDetails/n1:MNoteRow) &gt; 0">
																				<xsl:for-each select="n1:MNotes">
																					<xsl:for-each select="n1:MNotesDetails">
																						<xsl:for-each select="n1:MNoteRow">
																							<xsl:variable name="value-of-template_084E4818">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_084E4818),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_084E4818"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_084E4818"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:MNotes/n1:MNotesDetails/n1:MNoteRow) &gt; 0">
																				<xsl:for-each select="n1:MNotes">
																					<xsl:for-each select="n1:MNotesDetails">
																						<xsl:for-each select="n1:MNoteRow">
																							<xsl:variable name="value-of-template_084E4400">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_084E4400),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_084E4400"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_084E4400"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise/>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:MNotes">
																			<xsl:for-each select="n1:MNotesDetails">
																				<xsl:for-each select="n1:MNoteRow">
																					<xsl:variable name="value-of-template_09B5C4F8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09B5C4F8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09B5C4F8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09B5C4F8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:MNotes">
																			<xsl:for-each select="n1:MNotesDetails">
																				<xsl:for-each select="n1:MNoteRow">
																					<xsl:variable name="value-of-template_084E5E20">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084E5E20),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084E5E20"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084E5E20"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Value</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:MValue">
																			<xsl:variable name="value-of-template_084EC738">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_084EC738),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_084EC738"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_084EC738"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:MValue) &gt; 0">
																				<xsl:for-each select="n1:MValue">
																					<xsl:variable name="value-of-template_09B40C78">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09B40C78),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09B40C78"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09B40C78"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:MValue">
																			<xsl:variable name="value-of-template_09B40348">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_09B40348),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_09B40348"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_09B40348"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:MValue">
																			<xsl:variable name="value-of-template_085089F8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_085089F8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_085089F8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_085089F8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:MValue">
																			<xsl:variable name="value-of-template_09B5C7E8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_09B5C7E8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_09B5C7E8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_09B5C7E8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Unit</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:MUnit">
																			<xsl:variable name="value-of-template_09B4EE18">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_09B4EE18),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_09B4EE18"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_09B4EE18"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:MUnit) &gt; 0">
																				<xsl:for-each select="n1:MUnit">
																					<xsl:variable name="value-of-template_0B54B1B0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0B54B1B0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0B54B1B0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0B54B1B0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:MUnit">
																			<xsl:variable name="value-of-template_0A5CDA80">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0A5CDA80),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0A5CDA80"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0A5CDA80"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:MUnit">
																			<xsl:variable name="value-of-template_09B4C920">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_09B4C920),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_09B4C920"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_09B4C920"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:MUnit">
																			<xsl:variable name="value-of-template_084DEDC8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_084DEDC8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_084DEDC8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_084DEDC8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Type</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:MType">
																			<xsl:variable name="value-of-template_084E4C30">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_084E4C30),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_084E4C30"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_084E4C30"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:MCreationDate) &gt; 0">
																				<xsl:for-each select="n1:MType">
																					<xsl:variable name="value-of-template_084EE9D8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084EE9D8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084EE9D8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084EE9D8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:MType">
																			<xsl:variable name="value-of-template_09B4CE80">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_09B4CE80),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_09B4CE80"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_09B4CE80"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:MType">
																			<xsl:variable name="value-of-template_09B3E850">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_09B3E850),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_09B3E850"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_09B3E850"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:MType">
																			<xsl:variable name="value-of-template_08423058">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_08423058),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_08423058"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_08423058"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Creation Date</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:MCreationDate">
																			<xsl:variable name="value-of-template_09B41440">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_09B41440),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_09B41440"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_09B41440"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:MCreationDate) &gt; 0">
																				<xsl:for-each select="n1:MCreationDate">
																					<xsl:variable name="value-of-template_084E9D50">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084E9D50),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084E9D50"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084E9D50"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:MCreationDate">
																			<xsl:variable name="value-of-template_084E9960">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_084E9960),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_084E9960"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_084E9960"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:MCreationDate">
																			<xsl:variable name="value-of-template_084E9398">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_084E9398),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_084E9398"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_084E9398"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:MCreationDate">
																			<xsl:variable name="value-of-template_084EB430">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_084EB430),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_084EB430"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_084EB430"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Effective Note</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:MEffectiveDate">
																			<xsl:variable name="value-of-template_081D5F48">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_081D5F48),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_081D5F48"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_081D5F48"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:MEffectiveDate) &gt; 0">
																				<xsl:for-each select="n1:MEffectiveDate">
																					<xsl:variable name="value-of-template_0A5C3110">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A5C3110),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A5C3110"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A5C3110"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:MEffectiveDate">
																			<xsl:variable name="value-of-template_080300A8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_080300A8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_080300A8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_080300A8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:MEffectiveDate">
																			<xsl:variable name="value-of-template_0AC10008">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0AC10008),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0AC10008"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0AC10008"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:MEffectiveDate">
																			<xsl:variable name="value-of-template_081A3110">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_081A3110),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_081A3110"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_081A3110"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
										<xsl:if test="count( n1:MUsedInObjectCollection)">
											<fo:block>
												<fo:leader leader-pattern="space"/>
											</fo:block>
											<fo:inline font-size="xx-small" font-style="italic">
												<xsl:text>Impacted Objects</xsl:text>
											</fo:inline>
											<fo:inline-container>
												<fo:block>
													<xsl:text>&#x200B;</xsl:text>
												</fo:block>
											</fo:inline-container>
											<xsl:if test="n1:MUsedInObjectCollection">
												<fo:table width="25cm" table-layout="fixed" border-spacing="0">
													<fo:table-column column-width="8cm"/>
													<fo:table-column column-width="8.500cm"/>
													<fo:table-column column-width="8.500cm"/>
													<xsl:variable name="altova:CurrContextGrid_0A3F82C0" select="."/>
													<fo:table-header background-color="#d9f5ff" start-indent="0pt">
														<xsl:variable name="altova:tablerows">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline>
																			<xsl:text>Model Name</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline>
																			<xsl:text>Type</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline>
																			<xsl:text>Object Name</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="string($altova:tablerows)">
																<xsl:copy-of select="$altova:tablerows"/>
															</xsl:when>
															<xsl:otherwise>
																<fo:table-row>
																	<fo:table-cell>
																		<fo:block/>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:otherwise>
														</xsl:choose>
													</fo:table-header>
													<fo:table-body start-indent="0pt">
														<xsl:variable name="altova:tablerows">
															<xsl:for-each select="n1:MUsedInObjectCollection">
																<xsl:for-each select="n1:MUsedInObjectDetails">
																	<fo:table-row>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																			<fo:block text-align="left">
																				<xsl:choose>
																					<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																						<xsl:for-each select="n1:ModelName">
																							<xsl:variable name="value-of-template_0A9DC240">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A9DC240),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A9DC240"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A9DC240"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																						<xsl:choose>
																							<xsl:when test="string-length(n1:ModelName) &gt; 0">
																								<xsl:for-each select="n1:ModelName">
																									<xsl:variable name="value-of-template_0A9A7908">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_0A9A7908),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_0A9A7908"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_0A9A7908"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:text>&#160;</xsl:text>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																						<xsl:for-each select="n1:ModelName">
																							<xsl:variable name="value-of-template_0A47F8C0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A47F8C0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A47F8C0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A47F8C0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																						<xsl:for-each select="n1:ModelName">
																							<xsl:variable name="value-of-template_081D96A0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_081D96A0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_081D96A0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_081D96A0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																						<xsl:for-each select="n1:ModelName">
																							<xsl:variable name="value-of-template_080D4F20">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_080D4F20),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_080D4F20"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_080D4F20"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																				</xsl:choose>
																			</fo:block>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																			<fo:block text-align="left">
																				<xsl:choose>
																					<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																						<xsl:for-each select="n1:TypeName">
																							<xsl:variable name="value-of-template_084D6788">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_084D6788),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_084D6788"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_084D6788"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																						<xsl:choose>
																							<xsl:when test="string-length(n1:TypeName) &gt; 0">
																								<xsl:for-each select="n1:TypeName">
																									<xsl:variable name="value-of-template_084D34E0">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_084D34E0),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_084D34E0"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_084D34E0"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:text>&#160;</xsl:text>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																						<xsl:for-each select="n1:TypeName">
																							<xsl:variable name="value-of-template_084D6008">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_084D6008),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_084D6008"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_084D6008"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																						<xsl:for-each select="n1:TypeName">
																							<xsl:variable name="value-of-template_084EB990">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_084EB990),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_084EB990"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_084EB990"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																						<xsl:for-each select="n1:TypeName">
																							<xsl:variable name="value-of-template_09B48CC8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_09B48CC8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_09B48CC8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_09B48CC8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																				</xsl:choose>
																			</fo:block>
																		</fo:table-cell>
																		<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																			<fo:block text-align="left">
																				<xsl:choose>
																					<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																						<xsl:for-each select="n1:ObjectName">
																							<xsl:variable name="value-of-template_084DA0F0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_084DA0F0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_084DA0F0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_084DA0F0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																						<xsl:choose>
																							<xsl:when test="string-length(n1:ObjectName) &gt; 0">
																								<xsl:for-each select="n1:ObjectName">
																									<xsl:variable name="value-of-template_09B468F0">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_09B468F0),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_09B468F0"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_09B468F0"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:for-each>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:text>&#160;</xsl:text>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																						<xsl:for-each select="n1:ObjectName">
																							<xsl:variable name="value-of-template_08019AD8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_08019AD8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_08019AD8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_08019AD8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																						<xsl:for-each select="n1:ObjectName">
																							<xsl:variable name="value-of-template_08392240">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_08392240),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_08392240"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_08392240"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																						<xsl:for-each select="n1:ObjectName">
																							<xsl:variable name="value-of-template_0A605558">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A605558),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A605558"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A605558"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																				</xsl:choose>
																			</fo:block>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="string($altova:tablerows)">
																<xsl:copy-of select="$altova:tablerows"/>
															</xsl:when>
															<xsl:otherwise>
																<fo:table-row>
																	<fo:table-cell>
																		<fo:block/>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:otherwise>
														</xsl:choose>
													</fo:table-body>
												</fo:table>
											</xsl:if>
										</xsl:if>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:template>
	<xsl:template name="altova:double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
