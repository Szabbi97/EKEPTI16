<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2011 rel. 3 sp1 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="osdm_t" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-257365048-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-257365048-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-257365048-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-257365048-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-257365048-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-257365048-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-257365048">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-257365048-even-first" odd-or-even="even" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-257365048-odd-first" odd-or-even="odd" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-257365048-even-last" odd-or-even="even" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-257365048-odd-last" odd-or-even="odd" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-257365048-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-257365048-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:template match="/">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:declarations>
				<x:xmpmeta xmlns:x="adobe:ns:meta/">
					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
						<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
							<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2011 rel. 3 sp1 (http://www.altova.com)</xmp:CreatorTool>
						</rdf:Description>
					</rdf:RDF>
				</x:xmpmeta>
			</fo:declarations>
			<fo:page-sequence force-page-count="no-force" master-reference="page-master-257365048" initial-page-number="auto" format="1">
				<fo:static-content flow-name="odd-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-family="Tahoma" font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="18cm"/>
								<fo:table-column column-width="7cm"/>
								<xsl:variable name="altova:CurrContextGrid_0F5868B0" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="left">
													<fo:inline>
														<xsl:text>Oracle Data Modeler</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="right">
													<fo:inline>
														<xsl:text>Page: </xsl:text>
													</fo:inline>
													<fo:page-number/>
													<fo:inline>
														<xsl:text> / </xsl:text>
													</fo:inline>
													<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="even-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-family="Tahoma" font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="18cm"/>
								<fo:table-column column-width="7cm"/>
								<xsl:variable name="altova:CurrContextGrid_0F5868B0" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="left">
													<fo:inline>
														<xsl:text>Oracle Data Modeler</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="right">
													<fo:inline>
														<xsl:text>Page: </xsl:text>
													</fo:inline>
													<fo:page-number/>
													<fo:inline>
														<xsl:text> / </xsl:text>
													</fo:inline>
													<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:flow flow-name="xsl-region-body">
					<fo:block font-family="Tahoma" font-size="xx-small" empty-cells="show" text-align="left" display-align="before">
						<fo:inline-container>
							<fo:block>
								<xsl:text>&#x200B;</xsl:text>
							</fo:block>
						</fo:inline-container>
						<fo:block text-align="center" space-before="0" space-after="0" margin="0pt">
							<fo:inline font-size="medium" font-weight="bold">
								<xsl:text>Table Details</xsl:text>
							</fo:inline>
						</fo:block>
						<fo:block>
							<fo:leader leader-pattern="space"/>
						</fo:block>
						<xsl:for-each select="$XML">
							<xsl:for-each select="n1:root">
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table width="20cm" table-layout="fixed" border-spacing="0">
									<fo:table-column column-width="4cm"/>
									<fo:table-column column-width="16cm"/>
									<xsl:variable name="altova:CurrContextGrid_0F5877A0" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Design Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_0FB86700">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0FB86700),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0FB86700"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0FB86700"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:DesignName) &gt; 0">
																		<xsl:for-each select="n1:DesignName">
																			<xsl:variable name="value-of-template_0F46D988">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F46D988),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F46D988"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F46D988"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_0F46D038">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F46D038),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F46D038"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F46D038"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_0F46C968">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F46C968),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F46C968"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F46C968"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_0F470390">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F470390),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F470390"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F470390"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Version Date</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_0F46FFA0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F46FFA0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F46FFA0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F46FFA0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:VersionDate) &gt; 0">
																		<xsl:for-each select="n1:VersionDate">
																			<xsl:variable name="value-of-template_0F46FC10">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F46FC10),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F46FC10"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F46FC10"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_0F46F668">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F46F668),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F46F668"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F46F668"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_0F46EF98">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F46EF98),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F46EF98"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F46EF98"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_0F472AB8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F472AB8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F472AB8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F472AB8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Version Comment</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:VersionComment">
																	<xsl:for-each select="n1:VersionCommentDetails">
																		<xsl:for-each select="n1:VersionCommentRow">
																			<xsl:variable name="value-of-template_0F4726C8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F4726C8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F4726C8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F4726C8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:VersionComment) &gt; 0">
																		<xsl:for-each select="n1:VersionComment">
																			<xsl:for-each select="n1:VersionCommentDetails">
																				<xsl:for-each select="n1:VersionCommentRow">
																					<xsl:variable name="value-of-template_0F472338">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F472338),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F472338"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F472338"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																		<xsl:for-each select="n1:VersionComment">
																			<xsl:for-each select="n1:VersionCommentDetails">
																				<xsl:for-each select="n1:VersionCommentRow">
																					<xsl:variable name="value-of-template_0F471D90">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F471D90),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F471D90"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F471D90"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise/>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:VersionComment">
																	<xsl:for-each select="n1:VersionCommentDetails">
																		<xsl:for-each select="n1:VersionCommentRow">
																			<xsl:variable name="value-of-template_0F4716C0">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F4716C0),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F4716C0"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F4716C0"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:VersionComment">
																	<xsl:for-each select="n1:VersionCommentDetails">
																		<xsl:for-each select="n1:VersionCommentRow">
																			<xsl:variable name="value-of-template_0F45FA90">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F45FA90),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F45FA90"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F45FA90"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Model Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_0F45F378">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F45F378),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F45F378"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F45F378"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:ModelName) &gt; 0">
																		<xsl:for-each select="n1:ModelName">
																			<xsl:variable name="value-of-template_0F45EA80">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F45EA80),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F45EA80"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F45EA80"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_0F45DF40">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F45DF40),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F45DF40"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F45DF40"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_0F45D498">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F45D498),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F45D498"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F45D498"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_0F463750">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F463750),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F463750"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F463750"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<fo:inline>
									<xsl:text>&#160;</xsl:text>
								</fo:inline>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table width="15cm" table-layout="fixed" border-spacing="0">
									<fo:table-column column-width="4cm"/>
									<fo:table-column column-width="11cm"/>
									<xsl:variable name="altova:CurrContextGrid_0F541570" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Table Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell background-color="#a5e7ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:TableName">
																		<xsl:variable name="value-of-template_0F462FE8">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_0F462FE8),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0F462FE8"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0F462FE8"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:TableName) &gt; 0">
																		<fo:inline-container>
																			<fo:block>
																				<xsl:text>&#x200B;</xsl:text>
																			</fo:block>
																		</fo:inline-container>
																		<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																			<xsl:for-each select="n1:TableName">
																				<xsl:variable name="value-of-template_0F462668">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0F462668),'&#x200B;')">
																						<fo:block font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_0F462668"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_0F462668"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</fo:block>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:TableName">
																		<xsl:variable name="value-of-template_0F461AA8">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_0F461AA8),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0F461AA8"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0F461AA8"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:TableName">
																		<xsl:variable name="value-of-template_0F461008">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_0F461008),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0F461008"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0F461008"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:TableName">
																		<xsl:variable name="value-of-template_0F454350">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_0F454350),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0F454350"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0F454350"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Functional Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:FunctionalName">
																	<xsl:variable name="value-of-template_0F453F30">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F453F30),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F453F30"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F453F30"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:FunctionalName) &gt; 0">
																		<xsl:for-each select="n1:FunctionalName">
																			<xsl:variable name="value-of-template_0F453B10">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F453B10),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F453B10"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F453B10"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:FunctionalName">
																	<xsl:variable name="value-of-template_0F453750">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F453750),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F453750"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F453750"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:FunctionalName">
																	<xsl:variable name="value-of-template_0F4531B8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F4531B8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F4531B8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F4531B8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:FunctionalName">
																	<xsl:variable name="value-of-template_0F456158">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F456158),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F456158"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F456158"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Abbreviation</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:Abbreviation">
																	<xsl:variable name="value-of-template_0F455D68">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F455D68),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F455D68"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F455D68"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:Abbreviation) &gt; 0">
																		<xsl:for-each select="n1:Abbreviation">
																			<xsl:variable name="value-of-template_0F4559D8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F4559D8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F4559D8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F4559D8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:Abbreviation">
																	<xsl:variable name="value-of-template_0F455470">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F455470),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F455470"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F455470"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:Abbreviation">
																	<xsl:variable name="value-of-template_0F454E50">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F454E50),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F454E50"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F454E50"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:Abbreviation">
																	<xsl:variable name="value-of-template_0F457FF0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F457FF0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F457FF0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F457FF0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Classification Type Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:ClassificationTypeName">
																	<xsl:variable name="value-of-template_0F457C00">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F457C00),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F457C00"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F457C00"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:ClassificationTypeName) &gt; 0">
																		<xsl:for-each select="n1:ClassificationTypeName">
																			<xsl:variable name="value-of-template_0F457870">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F457870),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F457870"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F457870"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:ClassificationTypeName">
																	<xsl:variable name="value-of-template_0F457308">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F457308),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F457308"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F457308"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:ClassificationTypeName">
																	<xsl:variable name="value-of-template_0F456CE8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F456CE8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F456CE8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F456CE8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:ClassificationTypeName">
																	<xsl:variable name="value-of-template_0F459EA0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F459EA0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F459EA0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F459EA0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Object Type Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:ObjectTypeName">
																	<xsl:variable name="value-of-template_0F459AB0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F459AB0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F459AB0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F459AB0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:ObjectTypeName) &gt; 0">
																		<xsl:for-each select="n1:ObjectTypeName">
																			<xsl:variable name="value-of-template_0F459720">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F459720),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F459720"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F459720"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:ObjectTypeName">
																	<xsl:variable name="value-of-template_0F4591A0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F4591A0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F4591A0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F4591A0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:ObjectTypeName">
																	<xsl:variable name="value-of-template_0F458B80">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F458B80),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F458B80"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F458B80"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:ObjectTypeName">
																	<xsl:variable name="value-of-template_0F45BD98">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0F45BD98),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0F45BD98"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0F45BD98"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<fo:inline>
									<xsl:text>&#160;</xsl:text>
								</fo:inline>
								<xsl:if test="count( n1:DescriptionNotes )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline>
										<xsl:text>&#160;</xsl:text>
									</fo:inline>
									<xsl:for-each select="n1:DescriptionNotes">
										<fo:inline-container>
											<fo:block>
												<xsl:text>&#x200B;</xsl:text>
											</fo:block>
										</fo:inline-container>
										<fo:table width="20cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="16cm"/>
											<xsl:variable name="altova:CurrContextGrid_0F52DE00" select="."/>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Description</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:Description">
																			<xsl:for-each select="n1:DescriptionDetails">
																				<xsl:for-each select="n1:DescriptionRow">
																					<xsl:variable name="value-of-template_0F44E868">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F44E868),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F44E868"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F44E868"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																				<xsl:for-each select="n1:Description">
																					<xsl:for-each select="n1:DescriptionDetails">
																						<xsl:for-each select="n1:DescriptionRow">
																							<xsl:variable name="value-of-template_0F44A290">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F44A290),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F44A290"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F44A290"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																				<xsl:for-each select="n1:Description">
																					<xsl:for-each select="n1:DescriptionDetails">
																						<xsl:for-each select="n1:DescriptionRow">
																							<xsl:variable name="value-of-template_0F44A8B0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F44A8B0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F44A8B0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F44A8B0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise/>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:Description">
																			<xsl:for-each select="n1:DescriptionDetails">
																				<xsl:for-each select="n1:DescriptionRow">
																					<xsl:variable name="value-of-template_0F44AE18">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F44AE18),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F44AE18"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F44AE18"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:Description">
																			<xsl:for-each select="n1:DescriptionDetails">
																				<xsl:for-each select="n1:DescriptionRow">
																					<xsl:variable name="value-of-template_0F44B1A8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F44B1A8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F44B1A8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F44B1A8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Notes</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:Notes">
																			<xsl:for-each select="n1:NotesDetails">
																				<xsl:for-each select="n1:NoteRow">
																					<xsl:variable name="value-of-template_0F450698">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F450698),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F450698"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F450698"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:Notes/n1:NotesDetails/n1:NoteRow) &gt; 0">
																				<xsl:for-each select="n1:Notes">
																					<xsl:for-each select="n1:NotesDetails">
																						<xsl:for-each select="n1:NoteRow">
																							<xsl:variable name="value-of-template_0F44C4B8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F44C4B8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F44C4B8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F44C4B8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:Notes/n1:NotesDetails/n1:NoteRow) &gt; 0">
																				<xsl:for-each select="n1:Notes">
																					<xsl:for-each select="n1:NotesDetails">
																						<xsl:for-each select="n1:NoteRow">
																							<xsl:variable name="value-of-template_0F44CE60">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F44CE60),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F44CE60"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F44CE60"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise/>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:Notes">
																			<xsl:for-each select="n1:NotesDetails">
																				<xsl:for-each select="n1:NoteRow">
																					<xsl:variable name="value-of-template_0F44D920">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F44D920),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F44D920"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F44D920"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:Notes">
																			<xsl:for-each select="n1:NotesDetails">
																				<xsl:for-each select="n1:NoteRow">
																					<xsl:variable name="value-of-template_0F44E150">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F44E150),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F44E150"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F44E150"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:for-each>
								</xsl:if>
								<xsl:if test="count( n1:QuantitativeInfoCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<xsl:for-each select="n1:QuantitativeInfoCollection">
										<fo:inline-container>
											<fo:block>
												<xsl:text>&#x200B;</xsl:text>
											</fo:block>
										</fo:inline-container>
										<fo:table width="8cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="4cm"/>
											<xsl:variable name="altova:CurrContextGrid_0DAE28D8" select="."/>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Number Of Columns</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="right">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:NumberOfColumns">
																			<xsl:variable name="value-of-template_0F523E40">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F523E40),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F523E40"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F523E40"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:NumberOfColumns) &gt; 0">
																				<xsl:for-each select="n1:NumberOfColumns">
																					<xsl:variable name="value-of-template_0F8FD4D8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F8FD4D8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F8FD4D8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F8FD4D8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:NumberOfColumns">
																			<xsl:variable name="value-of-template_06BA6D60">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_06BA6D60),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_06BA6D60"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_06BA6D60"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:NumberOfColumns">
																			<xsl:variable name="value-of-template_06AADC70">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_06AADC70),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_06AADC70"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_06AADC70"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:NumberOfColumns">
																			<xsl:variable name="value-of-template_0F8F2090">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F8F2090),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F8F2090"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F8F2090"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Number Of Rows Min.</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="right">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:NumberOfRowsMin">
																			<xsl:variable name="value-of-template_0F42C448">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F42C448),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F42C448"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F42C448"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:NumberOfRowsMin) &gt; 0">
																				<xsl:for-each select="n1:NumberOfRowsMin">
																					<xsl:variable name="value-of-template_0809DE48">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0809DE48),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0809DE48"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0809DE48"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:NumberOfRowsMin">
																			<xsl:variable name="value-of-template_0C8E8300">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0C8E8300),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0C8E8300"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0C8E8300"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:NumberOfRowsMin">
																			<xsl:variable name="value-of-template_07FCCF40">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_07FCCF40),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_07FCCF40"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_07FCCF40"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:NumberOfRowsMin">
																			<xsl:variable name="value-of-template_0DAFFFA0">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0DAFFFA0),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0DAFFFA0"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0DAFFFA0"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Number Of Rows Max.</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="right">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:NumberOfRowsMax">
																			<xsl:variable name="value-of-template_06AE7F30">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_06AE7F30),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_06AE7F30"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_06AE7F30"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:NumberOfRowsMax) &gt; 0">
																				<xsl:for-each select="n1:NumberOfRowsMax">
																					<xsl:variable name="value-of-template_08017C28">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08017C28),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08017C28"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08017C28"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:NumberOfRowsMax">
																			<xsl:variable name="value-of-template_06AB0AD0">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_06AB0AD0),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_06AB0AD0"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_06AB0AD0"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:NumberOfRowsMax">
																			<xsl:variable name="value-of-template_0F434698">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F434698),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F434698"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F434698"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:NumberOfRowsMax">
																			<xsl:variable name="value-of-template_0AF32E70">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0AF32E70),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0AF32E70"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0AF32E70"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Expected Number Of Rows</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="right">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:ExpectedNumberOfRows">
																			<xsl:variable name="value-of-template_0F393C38">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F393C38),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F393C38"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F393C38"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:ExpectedNumberOfRows) &gt; 0">
																				<xsl:for-each select="n1:ExpectedNumberOfRows">
																					<xsl:variable name="value-of-template_0DA86710">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DA86710),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DA86710"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DA86710"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:ExpectedNumberOfRows">
																			<xsl:variable name="value-of-template_0F8FE1F8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F8FE1F8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F8FE1F8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F8FE1F8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:ExpectedNumberOfRows">
																			<xsl:variable name="value-of-template_0F43F3B8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F43F3B8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F43F3B8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F43F3B8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:ExpectedNumberOfRows">
																			<xsl:variable name="value-of-template_0F85FAC0">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F85FAC0),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F85FAC0"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F85FAC0"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Expected Growth</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="right">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:ExpectedGrowth">
																			<xsl:variable name="value-of-template_0804A528">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0804A528),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0804A528"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0804A528"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:ExpectedGrowth) &gt; 0">
																				<xsl:for-each select="n1:ExpectedGrowth">
																					<xsl:variable name="value-of-template_06B304C0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06B304C0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06B304C0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06B304C0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:ExpectedGrowth">
																			<xsl:variable name="value-of-template_08018D48">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_08018D48),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_08018D48"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_08018D48"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:ExpectedGrowth">
																			<xsl:variable name="value-of-template_07FB50C0">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_07FB50C0),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_07FB50C0"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_07FB50C0"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:ExpectedGrowth">
																			<xsl:variable name="value-of-template_0F8F6A08">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0F8F6A08),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0F8F6A08"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0F8F6A08"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Growth Interval</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="right">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:GrowthInterval">
																			<xsl:variable name="value-of-template_0808FED8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0808FED8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0808FED8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0808FED8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:GrowthInterval) &gt; 0">
																				<xsl:for-each select="n1:GrowthInterval">
																					<xsl:variable name="value-of-template_0802F490">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0802F490),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0802F490"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0802F490"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:GrowthInterval">
																			<xsl:variable name="value-of-template_0802F9F8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0802F9F8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0802F9F8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0802F9F8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:GrowthInterval">
																			<xsl:variable name="value-of-template_0802FDC0">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0802FDC0),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0802FDC0"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0802FDC0"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:GrowthInterval">
																			<xsl:variable name="value-of-template_084F7200">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_084F7200),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_084F7200"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_084F7200"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:for-each>
								</xsl:if>
								<xsl:if test="count( n1:ColumnsCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Columns</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:ColumnsCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="5cm"/>
											<fo:table-column column-width="0.800cm"/>
											<fo:table-column column-width="0.800cm"/>
											<fo:table-column column-width="0.800cm"/>
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="2.900cm"/>
											<fo:table-column column-width="2.900cm"/>
											<fo:table-column column-width="2.900cm"/>
											<fo:table-column column-width="2.900cm"/>
											<xsl:variable name="altova:CurrContextGrid_07FD5EC8" select="."/>
											<fo:table-header background-color="#d9f5ff" text-align="center" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>No</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Column Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>PK</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>FK</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>M</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Data Type</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>DT </xsl:text>
																</fo:inline>
																<fo:block/>
																<fo:inline>
																	<xsl:text>kind</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Domain Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Formula</xsl:text>
																</fo:inline>
																<fo:block/>
																<fo:inline>
																	<xsl:text>(Default Value)</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Security</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Abbreviation</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:ColumnsCollection">
														<xsl:for-each select="n1:ColumnDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="right">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:Sequence">
																					<xsl:variable name="value-of-template_0F883D68">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F883D68),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F883D68"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F883D68"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:Sequence) &gt; 0">
																						<xsl:for-each select="n1:Sequence">
																							<xsl:variable name="value-of-template_0EA2E608">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0EA2E608),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0EA2E608"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0EA2E608"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:Sequence">
																					<xsl:variable name="value-of-template_0DB03140">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DB03140),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DB03140"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DB03140"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:Sequence">
																					<xsl:variable name="value-of-template_0F39C2E8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F39C2E8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F39C2E8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F39C2E8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:Sequence">
																					<xsl:variable name="value-of-template_0F527C58">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F527C58),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F527C58"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F527C58"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:ColumnName">
																					<xsl:variable name="value-of-template_0F52D060">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F52D060),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F52D060"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F52D060"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:ColumnName) &gt; 0">
																						<xsl:for-each select="n1:ColumnName">
																							<xsl:variable name="value-of-template_0AF151A0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0AF151A0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0AF151A0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0AF151A0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:ColumnName">
																					<xsl:variable name="value-of-template_0F4535D8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F4535D8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F4535D8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F4535D8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:ColumnName">
																					<xsl:variable name="value-of-template_07FC2FB8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07FC2FB8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07FC2FB8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07FC2FB8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:ColumnName">
																					<xsl:variable name="value-of-template_09380E68">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09380E68),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09380E68"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09380E68"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:PK">
																					<xsl:variable name="value-of-template_0F520980">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F520980),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F520980"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F520980"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:PK) &gt; 0">
																						<xsl:for-each select="n1:PK">
																							<xsl:variable name="value-of-template_0F51E0F8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F51E0F8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F51E0F8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F51E0F8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:PK">
																					<xsl:variable name="value-of-template_0DB09FC8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DB09FC8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DB09FC8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DB09FC8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:PK">
																					<xsl:variable name="value-of-template_0DB0C9A8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DB0C9A8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DB0C9A8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DB0C9A8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:PK">
																					<xsl:variable name="value-of-template_0E75C310">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0E75C310),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0E75C310"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0E75C310"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FK">
																					<xsl:variable name="value-of-template_0F531808">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F531808),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F531808"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F531808"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FK) &gt; 0">
																						<xsl:for-each select="n1:FK">
																							<xsl:variable name="value-of-template_07FC4358">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07FC4358),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07FC4358"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07FC4358"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FK">
																					<xsl:variable name="value-of-template_08007C10">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08007C10),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08007C10"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08007C10"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FK">
																					<xsl:variable name="value-of-template_09301968">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09301968),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09301968"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09301968"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FK">
																					<xsl:variable name="value-of-template_0F5F1C90">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F5F1C90),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F5F1C90"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F5F1C90"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:M">
																					<xsl:variable name="value-of-template_0F8F85F0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F8F85F0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F8F85F0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F8F85F0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:M) &gt; 0">
																						<xsl:for-each select="n1:M">
																							<xsl:variable name="value-of-template_0DADBD28">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0DADBD28),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0DADBD28"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0DADBD28"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:M">
																					<xsl:variable name="value-of-template_08084DF0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08084DF0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08084DF0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08084DF0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:M">
																					<xsl:variable name="value-of-template_0F38D9F8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F38D9F8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F38D9F8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F38D9F8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:M">
																					<xsl:variable name="value-of-template_0DA67FB8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DA67FB8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DA67FB8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DA67FB8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:DataType">
																					<xsl:variable name="value-of-template_0EA292D0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0EA292D0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0EA292D0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0EA292D0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:DataType) &gt; 0">
																						<xsl:for-each select="n1:DataType">
																							<xsl:variable name="value-of-template_0A28DB98">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A28DB98),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A28DB98"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A28DB98"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:DataType">
																					<xsl:variable name="value-of-template_09300A68">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09300A68),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09300A68"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09300A68"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:DataType">
																					<xsl:variable name="value-of-template_0A289CA0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A289CA0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A289CA0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A289CA0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:DataType">
																					<xsl:variable name="value-of-template_0C5AF0A8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0C5AF0A8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0C5AF0A8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0C5AF0A8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:DataTypeKind">
																					<xsl:variable name="value-of-template_0F4551B0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F4551B0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F4551B0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F4551B0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:DataTypeKind) &gt; 0">
																						<xsl:for-each select="n1:DataTypeKind">
																							<xsl:variable name="value-of-template_0F457158">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F457158),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F457158"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F457158"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:DataTypeKind">
																					<xsl:variable name="value-of-template_0F45AC10">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F45AC10),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F45AC10"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F45AC10"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:DataTypeKind">
																					<xsl:variable name="value-of-template_0F44A3E0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F44A3E0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F44A3E0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F44A3E0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:DataTypeKind">
																					<xsl:variable name="value-of-template_0F44F470">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F44F470),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F44F470"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F44F470"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:DomainName">
																					<xsl:variable name="value-of-template_0AFC8178">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0AFC8178),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0AFC8178"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0AFC8178"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:DomainName) &gt; 0">
																						<xsl:for-each select="n1:DomainName">
																							<xsl:variable name="value-of-template_0DAC8E40">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0DAC8E40),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0DAC8E40"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0DAC8E40"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:DomainName">
																					<xsl:variable name="value-of-template_0F42F770">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F42F770),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F42F770"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F42F770"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:DomainName">
																					<xsl:variable name="value-of-template_0DA84008">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DA84008),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DA84008"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DA84008"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:DomainName">
																					<xsl:variable name="value-of-template_0DA84398">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DA84398),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DA84398"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DA84398"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:Formula">
																					<xsl:variable name="value-of-template_06BAB8B0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06BAB8B0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06BAB8B0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06BAB8B0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:Formula) &gt; 0">
																						<xsl:for-each select="n1:Formula">
																							<xsl:variable name="value-of-template_06B7B1D0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_06B7B1D0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_06B7B1D0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_06B7B1D0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:Formula">
																					<xsl:variable name="value-of-template_0C662608">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0C662608),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0C662608"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0C662608"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:Formula">
																					<xsl:variable name="value-of-template_0C662960">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0C662960),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0C662960"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0C662960"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:Formula">
																					<xsl:variable name="value-of-template_0D127A08">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0D127A08),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0D127A08"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0D127A08"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:Security">
																					<xsl:variable name="value-of-template_0F8F1B28">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F8F1B28),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F8F1B28"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F8F1B28"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:Security) &gt; 0">
																						<xsl:for-each select="n1:Security">
																							<xsl:variable name="value-of-template_07FEF078">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07FEF078),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07FEF078"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07FEF078"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:Security">
																					<xsl:variable name="value-of-template_0F8E37B8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F8E37B8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F8E37B8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F8E37B8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:Security">
																					<xsl:variable name="value-of-template_0945D500">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0945D500),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0945D500"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0945D500"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:Security">
																					<xsl:variable name="value-of-template_0804B0D8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0804B0D8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0804B0D8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0804B0D8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:PreferredAbbreviation">
																					<xsl:variable name="value-of-template_06BAAED0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06BAAED0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06BAAED0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06BAAED0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:PreferredAbbreviation) &gt; 0">
																						<xsl:for-each select="n1:PreferredAbbreviation">
																							<xsl:variable name="value-of-template_06B91320">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_06B91320),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_06B91320"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_06B91320"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:PreferredAbbreviation">
																					<xsl:variable name="value-of-template_0F8F8A50">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F8F8A50),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F8F8A50"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F8F8A50"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:PreferredAbbreviation">
																					<xsl:variable name="value-of-template_0F8F8E10">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F8F8E10),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F8F8E10"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F8F8E10"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:PreferredAbbreviation">
																					<xsl:variable name="value-of-template_0F8BC318">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F8BC318),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F8BC318"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F8BC318"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:ColumnsCommentsCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Columns Comments</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:ColumnsCommentsCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="6cm"/>
											<fo:table-column column-width="9cm"/>
											<fo:table-column column-width="9cm"/>
											<xsl:variable name="altova:CurrContextGrid_0A5C6008" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>No</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Column Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Description</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Notes</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:ColumnsCommentsCollection">
														<xsl:for-each select="n1:ColumnCommentsDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="right">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:ColumnCommentsSequence">
																					<xsl:variable name="value-of-template_0C5A0B68">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0C5A0B68),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0C5A0B68"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0C5A0B68"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:ColumnCommentsSequence) &gt; 0">
																						<xsl:for-each select="n1:ColumnCommentsSequence">
																							<xsl:variable name="value-of-template_0BC4CCD0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0BC4CCD0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0BC4CCD0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0BC4CCD0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:ColumnCommentsSequence">
																					<xsl:variable name="value-of-template_0DAF2288">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DAF2288),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DAF2288"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DAF2288"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:ColumnCommentsSequence">
																					<xsl:variable name="value-of-template_0DB0BAF0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DB0BAF0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DB0BAF0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DB0BAF0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:ColumnCommentsSequence">
																					<xsl:variable name="value-of-template_0F4B8110">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F4B8110),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F4B8110"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F4B8110"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:ColumnCommentsName">
																					<xsl:variable name="value-of-template_0F531360">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F531360),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F531360"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F531360"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:ColumnCommentsName) &gt; 0">
																						<xsl:for-each select="n1:ColumnCommentsName">
																							<xsl:variable name="value-of-template_0A55BD60">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A55BD60),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A55BD60"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A55BD60"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:ColumnCommentsName">
																					<xsl:variable name="value-of-template_0A308A28">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A308A28),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A308A28"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A308A28"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:ColumnCommentsName">
																					<xsl:variable name="value-of-template_0F5F2268">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F5F2268),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F5F2268"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F5F2268"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:ColumnCommentsName">
																					<xsl:variable name="value-of-template_0F5F7900">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F5F7900),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F5F7900"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F5F7900"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:ColumnDescription">
																					<xsl:for-each select="n1:ColumnDescriptionDetails">
																						<xsl:for-each select="n1:ColumnDescriptionRow">
																							<xsl:variable name="value-of-template_0F471E70">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F471E70),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F471E70"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F471E70"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="count(n1:ColumnDescription/n1:ColumnDescriptionDetails/n1:ColumnDescriptionRow) &gt; 0">
																						<xsl:for-each select="n1:ColumnDescription">
																							<xsl:for-each select="n1:ColumnDescriptionDetails">
																								<xsl:for-each select="n1:ColumnDescriptionRow">
																									<xsl:variable name="value-of-template_0F44C598">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_0F44C598),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_0F44C598"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_0F44C598"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																									<fo:block/>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:choose>
																					<xsl:when test="count(n1:ColumnDescription/n1:ColumnDescriptionDetails/n1:ColumnDescriptionRow) &gt; 0">
																						<xsl:for-each select="n1:ColumnDescription">
																							<xsl:for-each select="n1:ColumnDescriptionDetails">
																								<xsl:for-each select="n1:ColumnDescriptionRow">
																									<xsl:variable name="value-of-template_06A7EDD8">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_06A7EDD8),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_06A7EDD8"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_06A7EDD8"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																									<fo:block/>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise/>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:ColumnDescription">
																					<xsl:for-each select="n1:ColumnDescriptionDetails">
																						<xsl:for-each select="n1:ColumnDescriptionRow">
																							<xsl:variable name="value-of-template_0E799C78">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0E799C78),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0E799C78"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0E799C78"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:ColumnDescription">
																					<xsl:for-each select="n1:ColumnDescriptionDetails">
																						<xsl:for-each select="n1:ColumnDescriptionRow">
																							<xsl:variable name="value-of-template_0DDA03E0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0DDA03E0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0DDA03E0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0DDA03E0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:ColumnNotes">
																					<xsl:for-each select="n1:ColumnNotesDetails">
																						<xsl:for-each select="n1:ColumnNoteRow">
																							<xsl:variable name="value-of-template_08087318">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_08087318),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_08087318"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_08087318"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="count(n1:ColumnNotes/n1:ColumnNotesDetails/n1:ColumnNoteRow) &gt; 0">
																						<xsl:for-each select="n1:ColumnNotes">
																							<xsl:for-each select="n1:ColumnNotesDetails">
																								<xsl:for-each select="n1:ColumnNoteRow">
																									<xsl:variable name="value-of-template_0F922528">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_0F922528),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_0F922528"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_0F922528"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																									<fo:block/>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:choose>
																					<xsl:when test="count(n1:ColumnNotes/n1:ColumnNotesDetails/n1:ColumnNoteRow) &gt; 0">
																						<xsl:for-each select="n1:ColumnNotes">
																							<xsl:for-each select="n1:ColumnNotesDetails">
																								<xsl:for-each select="n1:ColumnNoteRow">
																									<xsl:variable name="value-of-template_0F43A728">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_0F43A728),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_0F43A728"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_0F43A728"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																									<fo:block/>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise/>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:ColumnNotes">
																					<xsl:for-each select="n1:ColumnNotesDetails">
																						<xsl:for-each select="n1:ColumnNoteRow">
																							<xsl:variable name="value-of-template_07FC2B60">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07FC2B60),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07FC2B60"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07FC2B60"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:ColumnNotes">
																					<xsl:for-each select="n1:ColumnNotesDetails">
																						<xsl:for-each select="n1:ColumnNoteRow">
																							<xsl:variable name="value-of-template_083ADD00">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_083ADD00),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_083ADD00"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_083ADD00"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:IndexesCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Indexes</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:IndexesCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="7cm"/>
											<fo:table-column column-width="1.500cm"/>
											<fo:table-column column-width="2cm"/>
											<fo:table-column column-width="1.500cm"/>
											<fo:table-column column-width="5.500cm"/>
											<fo:table-column column-width="6cm"/>
											<fo:table-column column-width="1.500cm"/>
											<xsl:variable name="altova:CurrContextGrid_0F5244B0" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Index Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>State</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Functional</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Spatial</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Expression</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Column Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Sort</xsl:text>
																</fo:inline>
																<fo:block/>
																<fo:inline>
																	<xsl:text>Order</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:IndexesCollection">
														<xsl:for-each select="n1:IndexDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:IndexName">
																					<xsl:variable name="value-of-template_0FB975C0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0FB975C0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0FB975C0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0FB975C0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:IndexName) &gt; 0">
																						<xsl:for-each select="n1:IndexName">
																							<xsl:variable name="value-of-template_0F51E648">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F51E648),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F51E648"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F51E648"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:IndexName">
																					<xsl:variable name="value-of-template_0F521988">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F521988),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F521988"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F521988"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:IndexName">
																					<xsl:variable name="value-of-template_0F5239C0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F5239C0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F5239C0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F5239C0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:IndexName">
																					<xsl:variable name="value-of-template_0F531D38">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F531D38),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F531D38"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F531D38"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:IndexState">
																					<xsl:variable name="value-of-template_08098010">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08098010),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08098010"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08098010"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:IndexState) &gt; 0">
																						<xsl:for-each select="n1:IndexState">
																							<xsl:variable name="value-of-template_0C5A3320">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0C5A3320),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0C5A3320"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0C5A3320"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:IndexState">
																					<xsl:variable name="value-of-template_0F521FA0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F521FA0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F521FA0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F521FA0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:IndexState">
																					<xsl:variable name="value-of-template_0F90D958">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F90D958),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F90D958"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F90D958"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:IndexState">
																					<xsl:variable name="value-of-template_083611D0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_083611D0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_083611D0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_083611D0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:IndexFunctional">
																					<xsl:variable name="value-of-template_0F533138">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F533138),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F533138"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F533138"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:IndexFunctional) &gt; 0">
																						<xsl:for-each select="n1:IndexFunctional">
																							<xsl:variable name="value-of-template_09301D68">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_09301D68),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_09301D68"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_09301D68"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:IndexFunctional">
																					<xsl:variable name="value-of-template_08010E48">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08010E48),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08010E48"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08010E48"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:IndexFunctional">
																					<xsl:variable name="value-of-template_0F532C48">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F532C48),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F532C48"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F532C48"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:IndexFunctional">
																					<xsl:variable name="value-of-template_0AFA9C10">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0AFA9C10),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0AFA9C10"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0AFA9C10"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:IndexSpatial">
																					<xsl:variable name="value-of-template_0F9170F0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F9170F0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F9170F0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F9170F0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:IndexSpatial) &gt; 0">
																						<xsl:for-each select="n1:IndexSpatial">
																							<xsl:variable name="value-of-template_0F5F8720">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F5F8720),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F5F8720"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F5F8720"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:IndexSpatial">
																					<xsl:variable name="value-of-template_0F433490">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F433490),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F433490"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F433490"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:IndexSpatial">
																					<xsl:variable name="value-of-template_0EA345B8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0EA345B8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0EA345B8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0EA345B8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:IndexSpatial">
																					<xsl:variable name="value-of-template_0F520DE8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F520DE8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F520DE8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F520DE8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:IndexExpression">
																					<xsl:variable name="value-of-template_0F461158">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F461158),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F461158"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F461158"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:IndexExpression) &gt; 0">
																						<xsl:for-each select="n1:IndexExpression">
																							<xsl:variable name="value-of-template_0EA2FB98">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0EA2FB98),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0EA2FB98"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0EA2FB98"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:IndexExpression">
																					<xsl:variable name="value-of-template_0D0F4878">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0D0F4878),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0D0F4878"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0D0F4878"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:IndexExpression">
																					<xsl:variable name="value-of-template_09306B28">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09306B28),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09306B28"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09306B28"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:IndexExpression">
																					<xsl:variable name="value-of-template_09306EE8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09306EE8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09306EE8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09306EE8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:IndexColumnName">
																					<xsl:variable name="value-of-template_0C63F420">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0C63F420),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0C63F420"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0C63F420"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:IndexColumnName) &gt; 0">
																						<xsl:for-each select="n1:IndexColumnName">
																							<xsl:variable name="value-of-template_06B83B90">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_06B83B90),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_06B83B90"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_06B83B90"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:IndexColumnName">
																					<xsl:variable name="value-of-template_07FCD7A8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07FCD7A8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07FCD7A8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07FCD7A8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:IndexColumnName">
																					<xsl:variable name="value-of-template_07FCDB68">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07FCDB68),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07FCDB68"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07FCDB68"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:IndexColumnName">
																					<xsl:variable name="value-of-template_0C665A48">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0C665A48),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0C665A48"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0C665A48"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:IndexSortOrder">
																					<xsl:variable name="value-of-template_08363790">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08363790),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08363790"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08363790"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:IndexSortOrder) &gt; 0">
																						<xsl:for-each select="n1:IndexSortOrder">
																							<xsl:variable name="value-of-template_0F8FBA48">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F8FBA48),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F8FBA48"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F8FBA48"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:IndexSortOrder">
																					<xsl:variable name="value-of-template_0F5F5B80">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F5F5B80),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F5F5B80"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F5F5B80"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:IndexSortOrder">
																					<xsl:variable name="value-of-template_0F9112E8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F9112E8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F9112E8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F9112E8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:IndexSortOrder">
																					<xsl:variable name="value-of-template_09550C00">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09550C00),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09550C00"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09550C00"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:ConstraintsCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Constraints</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:ConstraintsCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="3cm"/>
											<fo:table-column column-width="3cm"/>
											<fo:table-column column-width="19cm"/>
											<xsl:variable name="altova:CurrContextGrid_0AF2BC88" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row text-align="center">
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Type</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Column / Constraint Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Details</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:ConstraintsCollection">
														<xsl:for-each select="n1:TableLevelConstraintsCollection">
															<xsl:for-each select="n1:TableLevelConstraintDetails">
																<fo:table-row>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:TLConstraintType">
																						<xsl:variable name="value-of-template_0DAF7118">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0DAF7118),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0DAF7118"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0DAF7118"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:TLConstraintType) &gt; 0">
																							<xsl:for-each select="n1:TLConstraintType">
																								<xsl:variable name="value-of-template_0DAF7948">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_0DAF7948),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_0DAF7948"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_0DAF7948"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:TLConstraintType">
																						<xsl:variable name="value-of-template_0DAF88F8">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0DAF88F8),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0DAF88F8"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0DAF88F8"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:TLConstraintType">
																						<xsl:variable name="value-of-template_0F8DF278">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0F8DF278),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0F8DF278"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0F8DF278"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:TLConstraintType">
																						<xsl:variable name="value-of-template_0F915330">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0F915330),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0F915330"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0F915330"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:TLConstraintName">
																						<xsl:variable name="value-of-template_0945D8C0">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0945D8C0),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0945D8C0"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0945D8C0"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:TLConstraintName) &gt; 0">
																							<xsl:for-each select="n1:TLConstraintName">
																								<xsl:variable name="value-of-template_0F5A1E90">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_0F5A1E90),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_0F5A1E90"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_0F5A1E90"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:TLConstraintName">
																						<xsl:variable name="value-of-template_0E763B50">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0E763B50),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0E763B50"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0E763B50"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:TLConstraintName">
																						<xsl:variable name="value-of-template_09813008">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_09813008),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_09813008"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_09813008"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:TLConstraintName">
																						<xsl:variable name="value-of-template_09813338">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_09813338),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_09813338"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_09813338"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:TLConstraintRule">
																						<xsl:for-each select="n1:TLConstraintRuleDetails">
																							<xsl:for-each select="n1:TLConstraintRuleRow">
																								<xsl:variable name="value-of-template_0F4FE170">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_0F4FE170),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_0F4FE170"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_0F4FE170"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="count(n1:TLConstraintRule/n1:TLConstraintRuleDetails/n1:TLConstraintRuleRow) &gt; 0">
																							<xsl:for-each select="n1:TLConstraintRule">
																								<xsl:for-each select="n1:TLConstraintRuleDetails">
																									<xsl:for-each select="n1:TLConstraintRuleRow">
																										<xsl:variable name="value-of-template_09870BA8">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_09870BA8),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_09870BA8"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_09870BA8"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																										<fo:block/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:choose>
																						<xsl:when test="count(n1:TLConstraintRule/n1:TLConstraintRuleDetails/n1:TLConstraintRuleRow) &gt; 0">
																							<xsl:for-each select="n1:TLConstraintRule">
																								<xsl:for-each select="n1:TLConstraintRuleDetails">
																									<xsl:for-each select="n1:TLConstraintRuleRow">
																										<xsl:variable name="value-of-template_0EA313A0">
																											<xsl:apply-templates/>
																										</xsl:variable>
																										<xsl:choose>
																											<xsl:when test="contains(string($value-of-template_0EA313A0),'&#x200B;')">
																												<fo:block>
																													<xsl:copy-of select="$value-of-template_0EA313A0"/>
																												</fo:block>
																											</xsl:when>
																											<xsl:otherwise>
																												<fo:inline>
																													<xsl:copy-of select="$value-of-template_0EA313A0"/>
																												</fo:inline>
																											</xsl:otherwise>
																										</xsl:choose>
																										<fo:block/>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise/>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:TLConstraintRule">
																						<xsl:for-each select="n1:TLConstraintRuleDetails">
																							<xsl:for-each select="n1:TLConstraintRuleRow">
																								<xsl:variable name="value-of-template_08364350">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_08364350),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_08364350"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_08364350"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:TLConstraintRule">
																						<xsl:for-each select="n1:TLConstraintRuleDetails">
																							<xsl:for-each select="n1:TLConstraintRuleRow">
																								<xsl:variable name="value-of-template_09870228">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_09870228),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_09870228"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_09870228"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
													<xsl:for-each select="n1:ConstraintsCollection">
														<xsl:for-each select="n1:ColumnLevelConstraintsCollection">
															<xsl:for-each select="n1:ConstraintDetails">
																<fo:table-row>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:ContstraintType">
																						<xsl:variable name="value-of-template_08092670">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_08092670),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_08092670"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_08092670"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:ContstraintType) &gt; 0">
																							<xsl:for-each select="n1:ContstraintType">
																								<xsl:variable name="value-of-template_06B9DC00">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_06B9DC00),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_06B9DC00"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_06B9DC00"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:ContstraintType">
																						<xsl:variable name="value-of-template_0838ECA0">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0838ECA0),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0838ECA0"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0838ECA0"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:ContstraintType">
																						<xsl:variable name="value-of-template_0DD8F0A8">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0DD8F0A8),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0DD8F0A8"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0DD8F0A8"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:ContstraintType">
																						<xsl:variable name="value-of-template_0DD8F498">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0DD8F498),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0DD8F498"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0DD8F498"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																		<fo:block text-align="left">
																			<xsl:choose>
																				<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																					<xsl:for-each select="n1:ALCConstraintName">
																						<xsl:variable name="value-of-template_0F5F0348">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0F5F0348),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0F5F0348"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0F5F0348"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																					<xsl:choose>
																						<xsl:when test="string-length(n1:ALCConstraintName) &gt; 0">
																							<xsl:for-each select="n1:ALCConstraintName">
																								<xsl:variable name="value-of-template_093F5E98">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_093F5E98),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_093F5E98"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_093F5E98"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:for-each>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																					<xsl:for-each select="n1:ALCConstraintName">
																						<xsl:variable name="value-of-template_0A5D31E8">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0A5D31E8),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0A5D31E8"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0A5D31E8"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																					<xsl:for-each select="n1:ALCConstraintName">
																						<xsl:variable name="value-of-template_0BC83D88">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0BC83D88),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0BC83D88"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0BC83D88"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																					<xsl:for-each select="n1:ALCConstraintName">
																						<xsl:variable name="value-of-template_0DAF7EE0">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0DAF7EE0),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0DAF7EE0"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0DAF7EE0"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																	</fo:table-cell>
																	<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																		<fo:block text-align="left">
																			<xsl:if test="count( n1:RangesCollection ) != 0">
																				<fo:inline-container>
																					<fo:block>
																						<xsl:text>&#x200B;</xsl:text>
																					</fo:block>
																				</fo:inline-container>
																				<xsl:if test="n1:RangesCollection">
																					<fo:table width="18.5cm" table-layout="fixed" border-spacing="0">
																						<fo:table-column column-width="3cm"/>
																						<fo:table-column column-width="3cm"/>
																						<fo:table-column column-width="12.500cm"/>
																						<xsl:variable name="altova:CurrContextGrid_0DB262A0" select="."/>
																						<fo:table-header background-color="#d9f5ff" start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<fo:table-row>
																									<fo:table-cell number-columns-spanned="3" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="before">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Ranges</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																								<fo:table-row>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Begin Value</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>End Value</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Description</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-header>
																						<fo:table-body start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<xsl:for-each select="n1:RangesCollection">
																									<xsl:for-each select="n1:RangeDetails">
																										<fo:table-row>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																												<fo:block text-align="right">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:RangeBeginValue">
																																<xsl:variable name="value-of-template_0C8E2140">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0C8E2140),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0C8E2140"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0C8E2140"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:RangeBeginValue) &gt; 0">
																																	<xsl:for-each select="n1:RangeBeginValue">
																																		<xsl:variable name="value-of-template_0F4620C8">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_0F4620C8),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_0F4620C8"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_0F4620C8"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:RangeBeginValue">
																																<xsl:variable name="value-of-template_0F5F70F0">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0F5F70F0),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0F5F70F0"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0F5F70F0"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:RangeBeginValue">
																																<xsl:variable name="value-of-template_0F46CBE0">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0F46CBE0),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0F46CBE0"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0F46CBE0"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:RangeBeginValue">
																																<xsl:variable name="value-of-template_0F46F078">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0F46F078),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0F46F078"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0F46F078"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:table-cell>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																												<fo:block text-align="right">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:RangeEndValue">
																																<xsl:variable name="value-of-template_0F471C90">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0F471C90),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0F471C90"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0F471C90"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:RangeEndValue) &gt; 0">
																																	<xsl:for-each select="n1:RangeEndValue">
																																		<xsl:variable name="value-of-template_0AFC7EC8">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_0AFC7EC8),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_0AFC7EC8"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_0AFC7EC8"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:RangeEndValue">
																																<xsl:variable name="value-of-template_0A241F18">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0A241F18),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0A241F18"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0A241F18"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:RangeEndValue">
																																<xsl:variable name="value-of-template_0F5C9D20">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0F5C9D20),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0F5C9D20"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0F5C9D20"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:RangeEndValue">
																																<xsl:variable name="value-of-template_06B8D0B0">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_06B8D0B0),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_06B8D0B0"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_06B8D0B0"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:table-cell>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																												<fo:block text-align="left">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:RangeShortDescription">
																																<xsl:variable name="value-of-template_06B7A610">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_06B7A610),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_06B7A610"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_06B7A610"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:RangeShortDescription) &gt; 0">
																																	<xsl:for-each select="n1:RangeShortDescription">
																																		<xsl:variable name="value-of-template_0804D8B8">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_0804D8B8),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_0804D8B8"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_0804D8B8"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:RangeShortDescription">
																																<xsl:variable name="value-of-template_08002D20">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_08002D20),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_08002D20"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_08002D20"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:RangeShortDescription">
																																<xsl:variable name="value-of-template_080030E0">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_080030E0),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_080030E0"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_080030E0"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:RangeShortDescription">
																																<xsl:variable name="value-of-template_0EA339D8">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0EA339D8),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0EA339D8"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0EA339D8"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:table-cell>
																										</fo:table-row>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-body>
																					</fo:table>
																				</xsl:if>
																			</xsl:if>
																			<xsl:if test="count( n1:ValueListsCollection ) != 0">
																				<fo:block>
																					<fo:leader leader-pattern="space"/>
																				</fo:block>
																				<fo:inline-container>
																					<fo:block>
																						<xsl:text>&#x200B;</xsl:text>
																					</fo:block>
																				</fo:inline-container>
																				<xsl:if test="n1:ValueListsCollection">
																					<fo:table width="18.5cm" table-layout="fixed" border-spacing="0">
																						<fo:table-column column-width="3cm"/>
																						<fo:table-column column-width="15.500cm"/>
																						<xsl:variable name="altova:CurrContextGrid_0BC528D0" select="."/>
																						<fo:table-header background-color="#d9f5ff" start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<fo:table-row>
																									<fo:table-cell number-columns-spanned="2" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="before">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Value List</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																								<fo:table-row>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Value</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Description</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-header>
																						<fo:table-body start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<xsl:for-each select="n1:ValueListsCollection">
																									<xsl:for-each select="n1:ValueListDetails">
																										<fo:table-row>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																												<fo:block text-align="left">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:VLValue">
																																<xsl:variable name="value-of-template_0C664CD8">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0C664CD8),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0C664CD8"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0C664CD8"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:VLValue) &gt; 0">
																																	<xsl:for-each select="n1:VLValue">
																																		<xsl:variable name="value-of-template_0E75F078">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_0E75F078),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_0E75F078"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_0E75F078"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:VLValue">
																																<xsl:variable name="value-of-template_07FCFB48">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_07FCFB48),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_07FCFB48"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_07FCFB48"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:VLValue">
																																<xsl:variable name="value-of-template_07FCFF60">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_07FCFF60),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_07FCFF60"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_07FCFF60"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:VLValue">
																																<xsl:variable name="value-of-template_0FB97C50">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0FB97C50),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0FB97C50"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0FB97C50"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:table-cell>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																												<fo:block text-align="left">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:VLShortDescription">
																																<xsl:variable name="value-of-template_0F914D38">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0F914D38),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0F914D38"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0F914D38"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:VLShortDescription) &gt; 0">
																																	<xsl:for-each select="n1:VLShortDescription">
																																		<xsl:variable name="value-of-template_0F45F538">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_0F45F538),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_0F45F538"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_0F45F538"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:VLShortDescription">
																																<xsl:variable name="value-of-template_0DB0CB48">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0DB0CB48),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0DB0CB48"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0DB0CB48"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:VLShortDescription">
																																<xsl:variable name="value-of-template_0DB0CF38">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0DB0CF38),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0DB0CF38"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0DB0CF38"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:VLShortDescription">
																																<xsl:variable name="value-of-template_0F8DE228">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0F8DE228),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0F8DE228"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0F8DE228"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:table-cell>
																										</fo:table-row>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-body>
																					</fo:table>
																				</xsl:if>
																			</xsl:if>
																			<xsl:if test="count( n1:CheckConstraintsCollection ) != 0">
																				<fo:block>
																					<fo:leader leader-pattern="space"/>
																				</fo:block>
																				<fo:inline-container>
																					<fo:block>
																						<xsl:text>&#x200B;</xsl:text>
																					</fo:block>
																				</fo:inline-container>
																				<xsl:if test="n1:CheckConstraintsCollection">
																					<fo:table width="18.5cm" table-layout="fixed" border-spacing="0">
																						<fo:table-column column-width="15.500cm"/>
																						<fo:table-column column-width="3cm"/>
																						<xsl:variable name="altova:CurrContextGrid_07FCB460" select="."/>
																						<fo:table-header background-color="#d9f5ff" start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<fo:table-row>
																									<fo:table-cell number-columns-spanned="2" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="before">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Check Constraint</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																								<fo:table-row>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>Text</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																										<fo:block text-align="center">
																											<fo:inline>
																												<xsl:text>DB Type</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-header>
																						<fo:table-body start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<xsl:for-each select="n1:CheckConstraintsCollection">
																									<xsl:for-each select="n1:CheckConstraintDetails">
																										<fo:table-row>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																												<fo:block text-align="left">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:CheckConstraintText">
																																<xsl:for-each select="n1:CheckConstraintTextDetails">
																																	<xsl:for-each select="n1:CheckConstraintTextRow">
																																		<xsl:variable name="value-of-template_0F87C7F0">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_0F87C7F0),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_0F87C7F0"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_0F87C7F0"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																		<fo:block/>
																																	</xsl:for-each>
																																</xsl:for-each>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="count(n1:CheckConstraintText/n1:CheckConstraintTextDetails/n1:CheckConstraintTextRow) &gt; 0">
																																	<xsl:for-each select="n1:CheckConstraintText">
																																		<xsl:for-each select="n1:CheckConstraintTextDetails">
																																			<xsl:for-each select="n1:CheckConstraintTextRow">
																																				<xsl:variable name="value-of-template_0F880E98">
																																					<xsl:apply-templates/>
																																				</xsl:variable>
																																				<xsl:choose>
																																					<xsl:when test="contains(string($value-of-template_0F880E98),'&#x200B;')">
																																						<fo:block>
																																							<xsl:copy-of select="$value-of-template_0F880E98"/>
																																						</fo:block>
																																					</xsl:when>
																																					<xsl:otherwise>
																																						<fo:inline>
																																							<xsl:copy-of select="$value-of-template_0F880E98"/>
																																						</fo:inline>
																																					</xsl:otherwise>
																																				</xsl:choose>
																																				<fo:block/>
																																			</xsl:for-each>
																																		</xsl:for-each>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:choose>
																																<xsl:when test="count(n1:CheckConstraintText/n1:CheckConstraintTextDetails/n1:CheckConstraintTextRow) &gt; 0">
																																	<xsl:for-each select="n1:CheckConstraintText">
																																		<xsl:for-each select="n1:CheckConstraintTextDetails">
																																			<xsl:for-each select="n1:CheckConstraintTextRow">
																																				<xsl:variable name="value-of-template_0F52B5D0">
																																					<xsl:apply-templates/>
																																				</xsl:variable>
																																				<xsl:choose>
																																					<xsl:when test="contains(string($value-of-template_0F52B5D0),'&#x200B;')">
																																						<fo:block>
																																							<xsl:copy-of select="$value-of-template_0F52B5D0"/>
																																						</fo:block>
																																					</xsl:when>
																																					<xsl:otherwise>
																																						<fo:inline>
																																							<xsl:copy-of select="$value-of-template_0F52B5D0"/>
																																						</fo:inline>
																																					</xsl:otherwise>
																																				</xsl:choose>
																																				<fo:block/>
																																			</xsl:for-each>
																																		</xsl:for-each>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise/>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:CheckConstraintText">
																																<xsl:for-each select="n1:CheckConstraintTextDetails">
																																	<xsl:for-each select="n1:CheckConstraintTextRow">
																																		<xsl:variable name="value-of-template_0F52ED40">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_0F52ED40),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_0F52ED40"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_0F52ED40"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																		<fo:block/>
																																	</xsl:for-each>
																																</xsl:for-each>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:CheckConstraintText">
																																<xsl:for-each select="n1:CheckConstraintTextDetails">
																																	<xsl:for-each select="n1:CheckConstraintTextRow">
																																		<xsl:variable name="value-of-template_07FD7A38">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_07FD7A38),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_07FD7A38"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_07FD7A38"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																		<fo:block/>
																																	</xsl:for-each>
																																</xsl:for-each>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:table-cell>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																												<fo:block text-align="left">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:DatabaseType">
																																<xsl:variable name="value-of-template_0DA7CA08">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0DA7CA08),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0DA7CA08"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0DA7CA08"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:DatabaseType) &gt; 0">
																																	<xsl:for-each select="n1:DatabaseType">
																																		<xsl:variable name="value-of-template_0F526730">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_0F526730),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_0F526730"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_0F526730"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:DatabaseType">
																																<xsl:variable name="value-of-template_0F529840">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0F529840),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0F529840"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0F529840"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:DatabaseType">
																																<xsl:variable name="value-of-template_0A5BD1A0">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0A5BD1A0),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0A5BD1A0"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0A5BD1A0"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:DatabaseType">
																																<xsl:variable name="value-of-template_0A5BD590">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0A5BD590),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0A5BD590"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0A5BD590"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:table-cell>
																										</fo:table-row>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-body>
																					</fo:table>
																				</xsl:if>
																			</xsl:if>
																		</fo:block>
																	</fo:table-cell>
																</fo:table-row>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:FKRTCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Foreign Keys (referring to)</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:FKRTCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="7cm"/>
											<fo:table-column column-width="6cm"/>
											<fo:table-column column-width="2cm"/>
											<fo:table-column column-width="2cm"/>
											<fo:table-column column-width="2cm"/>
											<fo:table-column column-width="6cm"/>
											<xsl:variable name="altova:CurrContextGrid_0F90CD38" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Refering To</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Mandatory</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Transferable</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>In Arc</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Column Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:FKRTCollection">
														<xsl:for-each select="n1:FKRTDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKName">
																					<xsl:variable name="value-of-template_0F5023E0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F5023E0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F5023E0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F5023E0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKName) &gt; 0">
																						<xsl:for-each select="n1:FKName">
																							<xsl:variable name="value-of-template_0D10EC18">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0D10EC18),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0D10EC18"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0D10EC18"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKName">
																					<xsl:variable name="value-of-template_0A288250">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A288250),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A288250"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A288250"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKName">
																					<xsl:variable name="value-of-template_0F5E0968">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F5E0968),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F5E0968"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F5E0968"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKName">
																					<xsl:variable name="value-of-template_0F5E0D50">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F5E0D50),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F5E0D50"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F5E0D50"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKReferringTo">
																					<xsl:variable name="value-of-template_0F52C208">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F52C208),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F52C208"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F52C208"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKReferringTo) &gt; 0">
																						<xsl:for-each select="n1:FKReferringTo">
																							<xsl:variable name="value-of-template_0F52C738">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F52C738),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F52C738"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F52C738"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKReferringTo">
																					<xsl:variable name="value-of-template_0F52D960">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F52D960),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F52D960"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F52D960"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKReferringTo">
																					<xsl:variable name="value-of-template_0F58D258">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F58D258),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F58D258"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F58D258"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKReferringTo">
																					<xsl:variable name="value-of-template_0F85E008">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F85E008),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F85E008"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F85E008"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKMandatory">
																					<xsl:variable name="value-of-template_0DDAC030">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DDAC030),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DDAC030"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DDAC030"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKMandatory) &gt; 0">
																						<xsl:for-each select="n1:FKMandatory">
																							<xsl:variable name="value-of-template_0DB281A0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0DB281A0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0DB281A0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0DB281A0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKMandatory">
																					<xsl:variable name="value-of-template_0F8DF968">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F8DF968),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F8DF968"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F8DF968"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKMandatory">
																					<xsl:variable name="value-of-template_0F5272B0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F5272B0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F5272B0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F5272B0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKMandatory">
																					<xsl:variable name="value-of-template_0F527640">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F527640),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F527640"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F527640"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKTransferable">
																					<xsl:variable name="value-of-template_07FB6AF8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07FB6AF8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07FB6AF8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07FB6AF8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKTransferable) &gt; 0">
																						<xsl:for-each select="n1:FKTransferable">
																							<xsl:variable name="value-of-template_0A30B9B8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A30B9B8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A30B9B8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A30B9B8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKTransferable">
																					<xsl:variable name="value-of-template_0AFCC0C0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0AFCC0C0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0AFCC0C0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0AFCC0C0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKTransferable">
																					<xsl:variable name="value-of-template_0AFCC480">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0AFCC480),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0AFCC480"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0AFCC480"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKTransferable">
																					<xsl:variable name="value-of-template_0A21F110">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A21F110),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A21F110"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A21F110"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKInArc">
																					<xsl:variable name="value-of-template_06BA3410">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06BA3410),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06BA3410"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06BA3410"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKInArc) &gt; 0">
																						<xsl:for-each select="n1:FKInArc">
																							<xsl:variable name="value-of-template_0A1A8DA8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A1A8DA8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A1A8DA8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A1A8DA8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKInArc">
																					<xsl:variable name="value-of-template_0E7978D8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0E7978D8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0E7978D8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0E7978D8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKInArc">
																					<xsl:variable name="value-of-template_0C8D3A60">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0C8D3A60),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0C8D3A60"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0C8D3A60"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKInArc">
																					<xsl:variable name="value-of-template_0C8D3E78">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0C8D3E78),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0C8D3E78"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0C8D3E78"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKColumnName">
																					<xsl:variable name="value-of-template_0F43BF60">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F43BF60),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F43BF60"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F43BF60"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKColumnName) &gt; 0">
																						<xsl:for-each select="n1:FKColumnName">
																							<xsl:variable name="value-of-template_07FC8A08">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07FC8A08),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07FC8A08"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07FC8A08"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKColumnName">
																					<xsl:variable name="value-of-template_0E762008">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0E762008),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0E762008"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0E762008"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKColumnName">
																					<xsl:variable name="value-of-template_0E762368">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0E762368),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0E762368"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0E762368"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKColumnName">
																					<xsl:variable name="value-of-template_0F4BD078">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F4BD078),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F4BD078"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F4BD078"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:FKRFCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Foreign Keys (referred from)</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:FKRFCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="7cm"/>
											<fo:table-column column-width="6cm"/>
											<fo:table-column column-width="2cm"/>
											<fo:table-column column-width="2cm"/>
											<fo:table-column column-width="2cm"/>
											<fo:table-column column-width="6cm"/>
											<xsl:variable name="altova:CurrContextGrid_0F586080" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Referred From</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Mandatory</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Transferable</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>In Arc</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Column Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:FKRFCollection">
														<xsl:for-each select="n1:FKRFDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKName">
																					<xsl:variable name="value-of-template_08061480">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08061480),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08061480"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08061480"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKName) &gt; 0">
																						<xsl:for-each select="n1:FKName">
																							<xsl:variable name="value-of-template_092FD3A0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_092FD3A0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_092FD3A0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_092FD3A0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKName">
																					<xsl:variable name="value-of-template_0C660E00">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0C660E00),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0C660E00"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0C660E00"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKName">
																					<xsl:variable name="value-of-template_0EA15618">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0EA15618),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0EA15618"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0EA15618"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKName">
																					<xsl:variable name="value-of-template_0EA15A30">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0EA15A30),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0EA15A30"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0EA15A30"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKReferredFrom">
																					<xsl:variable name="value-of-template_0EA26DA0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0EA26DA0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0EA26DA0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0EA26DA0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKReferredFrom) &gt; 0">
																						<xsl:for-each select="n1:FKReferredFrom">
																							<xsl:variable name="value-of-template_0EA27350">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0EA27350),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0EA27350"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0EA27350"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKReferredFrom">
																					<xsl:variable name="value-of-template_09549208">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09549208),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09549208"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09549208"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKReferredFrom">
																					<xsl:variable name="value-of-template_0DDAE1A0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DDAE1A0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DDAE1A0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DDAE1A0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKReferredFrom">
																					<xsl:variable name="value-of-template_0DDAE590">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DDAE590),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DDAE590"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DDAE590"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKMandatory">
																					<xsl:variable name="value-of-template_0DAFD560">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0DAFD560),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0DAFD560"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0DAFD560"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKMandatory) &gt; 0">
																						<xsl:for-each select="n1:FKMandatory">
																							<xsl:variable name="value-of-template_0DB07370">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0DB07370),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0DB07370"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0DB07370"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKMandatory">
																					<xsl:variable name="value-of-template_080649F8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_080649F8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_080649F8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_080649F8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKMandatory">
																					<xsl:variable name="value-of-template_08064DE8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08064DE8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08064DE8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08064DE8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKMandatory">
																					<xsl:variable name="value-of-template_0A5BFAE0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A5BFAE0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A5BFAE0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A5BFAE0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKTransferable">
																					<xsl:variable name="value-of-template_0F520238">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F520238),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F520238"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F520238"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKTransferable) &gt; 0">
																						<xsl:for-each select="n1:FKTransferable">
																							<xsl:variable name="value-of-template_0C5BAA00">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0C5BAA00),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0C5BAA00"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0C5BAA00"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKTransferable">
																					<xsl:variable name="value-of-template_0E741400">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0E741400),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0E741400"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0E741400"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKTransferable">
																					<xsl:variable name="value-of-template_0F37FFE8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F37FFE8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F37FFE8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F37FFE8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKTransferable">
																					<xsl:variable name="value-of-template_0F3803D8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F3803D8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F3803D8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F3803D8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKInArc">
																					<xsl:variable name="value-of-template_0F52AC70">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F52AC70),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F52AC70"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F52AC70"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKInArc) &gt; 0">
																						<xsl:for-each select="n1:FKInArc">
																							<xsl:variable name="value-of-template_0F530BA8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0F530BA8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0F530BA8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0F530BA8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKInArc">
																					<xsl:variable name="value-of-template_0955F8E0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0955F8E0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0955F8E0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0955F8E0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKInArc">
																					<xsl:variable name="value-of-template_0955FC98">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0955FC98),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0955FC98"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0955FC98"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKInArc">
																					<xsl:variable name="value-of-template_0F522758">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0F522758),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0F522758"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0F522758"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:FKColumnName">
																					<xsl:variable name="value-of-template_0809B018">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0809B018),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0809B018"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0809B018"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:FKColumnName) &gt; 0">
																						<xsl:for-each select="n1:FKColumnName">
																							<xsl:variable name="value-of-template_08C17AC0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_08C17AC0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_08C17AC0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_08C17AC0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:FKColumnName">
																					<xsl:variable name="value-of-template_0E711420">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0E711420),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0E711420"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0E711420"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:FKColumnName">
																					<xsl:variable name="value-of-template_0E711810">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0E711810),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0E711810"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0E711810"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:FKColumnName">
																					<xsl:variable name="value-of-template_07FCBC58">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07FCBC58),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07FCBC58"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07FCBC58"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:template>
	<xsl:template name="altova:double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
