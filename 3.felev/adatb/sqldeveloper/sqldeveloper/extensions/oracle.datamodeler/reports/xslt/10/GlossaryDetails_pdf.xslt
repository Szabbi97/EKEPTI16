<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2011 rel. 3 sp1 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="osdm_g" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-141815904-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-141815904-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-141815904-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-141815904-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-141815904-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-141815904-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-141815904">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-141815904-even-first" odd-or-even="even" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-141815904-odd-first" odd-or-even="odd" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-141815904-even-last" odd-or-even="even" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-141815904-odd-last" odd-or-even="odd" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-141815904-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-141815904-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:template match="/">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:declarations>
				<x:xmpmeta xmlns:x="adobe:ns:meta/">
					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
						<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
							<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2011 rel. 3 sp1 (http://www.altova.com)</xmp:CreatorTool>
						</rdf:Description>
					</rdf:RDF>
				</x:xmpmeta>
			</fo:declarations>
			<fo:page-sequence force-page-count="no-force" master-reference="page-master-141815904" initial-page-number="auto" format="1">
				<fo:static-content flow-name="odd-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="18cm"/>
								<fo:table-column column-width="7cm"/>
								<xsl:variable name="altova:CurrContextGrid_0B107768" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="left">
													<fo:inline>
														<xsl:text>Oracle Data Modeler</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="right">
													<fo:inline>
														<xsl:text>Page: </xsl:text>
													</fo:inline>
													<fo:page-number/>
													<fo:inline>
														<xsl:text> / </xsl:text>
													</fo:inline>
													<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="even-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="18cm"/>
								<fo:table-column column-width="7cm"/>
								<xsl:variable name="altova:CurrContextGrid_0B107768" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="left">
													<fo:inline>
														<xsl:text>Oracle Data Modeler</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="right">
													<fo:inline>
														<xsl:text>Page: </xsl:text>
													</fo:inline>
													<fo:page-number/>
													<fo:inline>
														<xsl:text> / </xsl:text>
													</fo:inline>
													<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:flow flow-name="xsl-region-body">
					<fo:block font-family="Tahoma" font-size="xx-small" empty-cells="show" text-align="left" display-align="before">
						<fo:inline-container>
							<fo:block>
								<xsl:text>&#x200B;</xsl:text>
							</fo:block>
						</fo:inline-container>
						<fo:block text-align="center" space-before="0" space-after="0" margin="0pt">
							<fo:inline font-size="medium" font-weight="bold">
								<xsl:text>Glossary Details</xsl:text>
							</fo:inline>
						</fo:block>
						<fo:block>
							<fo:leader leader-pattern="space"/>
						</fo:block>
						<xsl:for-each select="$XML">
							<xsl:for-each select="n1:root">
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table width="15cm" table-layout="fixed" border-spacing="0">
									<fo:table-column column-width="4cm"/>
									<fo:table-column column-width="11cm"/>
									<xsl:variable name="altova:CurrContextGrid_0A618C00" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Glossary Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell background-color="#a5e7ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:GlossaryName">
																		<xsl:variable name="value-of-template_081E17D0">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_081E17D0),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_081E17D0"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_081E17D0"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:GlossaryName) &gt; 0">
																		<fo:inline-container>
																			<fo:block>
																				<xsl:text>&#x200B;</xsl:text>
																			</fo:block>
																		</fo:inline-container>
																		<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																			<xsl:for-each select="n1:GlossaryName">
																				<xsl:variable name="value-of-template_0B073B48">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B073B48),'&#x200B;')">
																						<fo:block font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_0B073B48"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_0B073B48"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</fo:block>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:GlossaryName">
																		<xsl:variable name="value-of-template_0B066A30">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_0B066A30),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0B066A30"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0B066A30"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:GlossaryName">
																		<xsl:variable name="value-of-template_0B076D70">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_0B076D70),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0B076D70"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0B076D70"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:GlossaryName">
																		<xsl:variable name="value-of-template_0B0767C8">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_0B0767C8),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0B0767C8"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_0B0767C8"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Description</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:Description">
																	<xsl:for-each select="n1:DescriptionDetails">
																		<xsl:for-each select="n1:DescriptionRow">
																			<xsl:variable name="value-of-template_0B0760F8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0B0760F8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0B0760F8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0B0760F8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																		<xsl:for-each select="n1:Description">
																			<xsl:for-each select="n1:DescriptionDetails">
																				<xsl:for-each select="n1:DescriptionRow">
																					<xsl:variable name="value-of-template_0B079C20">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0B079C20),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0B079C20"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0B079C20"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																		<xsl:for-each select="n1:Description">
																			<xsl:for-each select="n1:DescriptionDetails">
																				<xsl:for-each select="n1:DescriptionRow">
																					<xsl:variable name="value-of-template_0B0612E8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0B0612E8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0B0612E8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0B0612E8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise/>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:Description">
																	<xsl:for-each select="n1:DescriptionDetails">
																		<xsl:for-each select="n1:DescriptionRow">
																			<xsl:variable name="value-of-template_0B0794A0">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0B0794A0),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0B0794A0"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0B0794A0"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:Description">
																	<xsl:for-each select="n1:DescriptionDetails">
																		<xsl:for-each select="n1:DescriptionRow">
																			<xsl:variable name="value-of-template_0B071B38">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0B071B38),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0B071B38"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0B071B38"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>File Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:FileName">
																	<xsl:variable name="value-of-template_0B078820">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B078820),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B078820"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B078820"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:FileName) &gt; 0">
																		<xsl:for-each select="n1:FileName">
																			<xsl:variable name="value-of-template_0B067148">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0B067148),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0B067148"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0B067148"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:FileName">
																	<xsl:variable name="value-of-template_0AFB8298">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0AFB8298),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0AFB8298"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0AFB8298"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:FileName">
																	<xsl:variable name="value-of-template_06B40D30">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_06B40D30),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_06B40D30"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_06B40D30"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:FileName">
																	<xsl:variable name="value-of-template_0B05AE48">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B05AE48),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B05AE48"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B05AE48"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Incomplete Modifiers</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:IncompleteModifiers">
																	<xsl:variable name="value-of-template_0B05E598">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B05E598),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B05E598"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B05E598"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:IncompleteModifiers) &gt; 0">
																		<xsl:for-each select="n1:IncompleteModifiers">
																			<xsl:variable name="value-of-template_0B0616D8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0B0616D8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0B0616D8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0B0616D8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:IncompleteModifiers">
																	<xsl:variable name="value-of-template_0B052B28">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B052B28),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B052B28"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B052B28"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:IncompleteModifiers">
																	<xsl:variable name="value-of-template_0B05F980">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B05F980),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B05F980"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B05F980"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:IncompleteModifiers">
																	<xsl:variable name="value-of-template_0B0547E0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B0547E0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B0547E0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B0547E0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Case Sensitive</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:CaseSensitive">
																	<xsl:variable name="value-of-template_0B0622C8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B0622C8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B0622C8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B0622C8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:CaseSensitive) &gt; 0">
																		<xsl:for-each select="n1:CaseSensitive">
																			<xsl:variable name="value-of-template_0A652008">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0A652008),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0A652008"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0A652008"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:CaseSensitive">
																	<xsl:variable name="value-of-template_07FFE010">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_07FFE010),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_07FFE010"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_07FFE010"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:CaseSensitive">
																	<xsl:variable name="value-of-template_0B0B4560">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B0B4560),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B0B4560"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B0B4560"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:CaseSensitive">
																	<xsl:variable name="value-of-template_0B052230">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B052230),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B052230"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B052230"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Unique Abbreviations</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:UniqueAbbreviations">
																	<xsl:variable name="value-of-template_0A62A8A0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0A62A8A0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0A62A8A0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0A62A8A0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:UniqueAbbreviations) &gt; 0">
																		<xsl:for-each select="n1:UniqueAbbreviations">
																			<xsl:variable name="value-of-template_0B052F18">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0B052F18),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0B052F18"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0B052F18"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:UniqueAbbreviations">
																	<xsl:variable name="value-of-template_0B0631E0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B0631E0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B0631E0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B0631E0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:UniqueAbbreviations">
																	<xsl:variable name="value-of-template_0B060F58">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B060F58),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B060F58"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B060F58"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:UniqueAbbreviations">
																	<xsl:variable name="value-of-template_08024480">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_08024480),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_08024480"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_08024480"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Separator Type</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:SeparatorType">
																	<xsl:variable name="value-of-template_0B05C6E0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B05C6E0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B05C6E0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B05C6E0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:SeparatorType) &gt; 0">
																		<xsl:for-each select="n1:SeparatorType">
																			<xsl:variable name="value-of-template_0B05F8A0">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0B05F8A0),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0B05F8A0"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0B05F8A0"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:SeparatorType">
																	<xsl:variable name="value-of-template_0B05F4B0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B05F4B0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B05F4B0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B05F4B0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:SeparatorType">
																	<xsl:variable name="value-of-template_081D2E20">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_081D2E20),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_081D2E20"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_081D2E20"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:SeparatorType">
																	<xsl:variable name="value-of-template_07FFED60">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_07FFED60),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_07FFED60"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_07FFED60"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Separator Char</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:SeparatorChar">
																	<xsl:variable name="value-of-template_0B05A7F8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B05A7F8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B05A7F8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B05A7F8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:SeparatorChar) &gt; 0 or n1:SeparatorChar = &apos; &apos;">
																		<xsl:for-each select="n1:SeparatorChar">
																			<xsl:variable name="value-of-template_0B05DA08">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_0B05DA08),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_0B05DA08"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_0B05DA08"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:SeparatorChar">
																	<xsl:variable name="value-of-template_0A637830">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0A637830),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0A637830"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0A637830"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:SeparatorChar">
																	<xsl:variable name="value-of-template_0B05F120">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B05F120),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B05F120"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B05F120"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:SeparatorChar">
																	<xsl:variable name="value-of-template_0B068D50">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0B068D50),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0B068D50"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0B068D50"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<fo:inline>
									<xsl:text>&#160;</xsl:text>
								</fo:inline>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<xsl:if test="n1:GlossaryCollection">
									<fo:table width="25cm" table-layout="fixed" border-spacing="0">
										<fo:table-column column-width="4cm"/>
										<fo:table-column column-width="4cm"/>
										<fo:table-column column-width="4cm"/>
										<fo:table-column column-width="4cm"/>
										<fo:table-column column-width="1cm"/>
										<fo:table-column column-width="1cm"/>
										<fo:table-column column-width="1cm"/>
										<fo:table-column column-width="1cm"/>
										<fo:table-column column-width="5cm"/>
										<xsl:variable name="altova:CurrContextGrid_06B5B318" select="."/>
										<fo:table-header background-color="#d9f5ff" start-indent="0pt">
											<xsl:variable name="altova:tablerows">
												<fo:table-row>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block text-align="center">
															<fo:inline>
																<xsl:text>Term Name</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block text-align="center">
															<fo:inline>
																<xsl:text>Plural</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block text-align="center">
															<fo:inline>
																<xsl:text>Abbreviation</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block text-align="center">
															<fo:inline>
																<xsl:text>Alt Abbreviation</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block text-align="center">
															<fo:inline>
																<xsl:text>P</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block text-align="center">
															<fo:inline>
																<xsl:text>C</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block text-align="center">
															<fo:inline>
																<xsl:text>M</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block text-align="center">
															<fo:inline>
																<xsl:text>Q</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block text-align="center">
															<fo:inline>
																<xsl:text>Short Description</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="string($altova:tablerows)">
													<xsl:copy-of select="$altova:tablerows"/>
												</xsl:when>
												<xsl:otherwise>
													<fo:table-row>
														<fo:table-cell>
															<fo:block/>
														</fo:table-cell>
													</fo:table-row>
												</xsl:otherwise>
											</xsl:choose>
										</fo:table-header>
										<fo:table-body start-indent="0pt">
											<xsl:variable name="altova:tablerows">
												<xsl:for-each select="n1:GlossaryCollection">
													<xsl:for-each select="n1:GlossaryDetail">
														<fo:table-row>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:TermName">
																				<xsl:variable name="value-of-template_0B068338">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B068338),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B068338"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B068338"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:TermName) &gt; 0">
																					<xsl:for-each select="n1:TermName">
																						<xsl:variable name="value-of-template_0B05BBE0">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0B05BBE0),'&#x200B;')">
																								<fo:block font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_0B05BBE0"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline font-size="xx-small">
																									<xsl:copy-of select="$value-of-template_0B05BBE0"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:TermName">
																				<xsl:variable name="value-of-template_0B077100">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B077100),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B077100"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B077100"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:TermName">
																				<xsl:variable name="value-of-template_0B05B400">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B05B400),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B05B400"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B05B400"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:TermName">
																				<xsl:variable name="value-of-template_0B0656C0">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B0656C0),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B0656C0"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B0656C0"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" padding="3" display-align="center">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:Plural">
																				<xsl:variable name="value-of-template_0B071468">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B071468),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B071468"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B071468"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:Plural) &gt; 0">
																					<xsl:for-each select="n1:Plural">
																						<xsl:variable name="value-of-template_0B074EE0">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0B074EE0),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0B074EE0"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0B074EE0"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:Plural">
																				<xsl:variable name="value-of-template_0B05D618">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B05D618),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B05D618"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B05D618"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:Plural">
																				<xsl:variable name="value-of-template_0B0698C8">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B0698C8),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B0698C8"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B0698C8"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:Plural">
																				<xsl:variable name="value-of-template_0A626010">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0A626010),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0A626010"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0A626010"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:Abbreviation">
																				<xsl:variable name="value-of-template_0B064D18">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B064D18),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B064D18"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B064D18"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:Abbreviation) &gt; 0">
																					<xsl:for-each select="n1:Abbreviation">
																						<xsl:variable name="value-of-template_0B06A938">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0B06A938),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0B06A938"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0B06A938"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:Abbreviation">
																				<xsl:variable name="value-of-template_0B05B7C0">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B05B7C0),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B05B7C0"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B05B7C0"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:Abbreviation">
																				<xsl:variable name="value-of-template_0B074760">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B074760),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B074760"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B074760"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:Abbreviation">
																				<xsl:variable name="value-of-template_0B05EBB8">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B05EBB8),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B05EBB8"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B05EBB8"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:AltAbbreviation">
																				<xsl:variable name="value-of-template_0B053E38">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B053E38),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B053E38"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B053E38"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:AltAbbreviation) &gt; 0">
																					<xsl:for-each select="n1:AltAbbreviation">
																						<xsl:variable name="value-of-template_0B058018">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0B058018),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0B058018"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0B058018"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:AltAbbreviation">
																				<xsl:variable name="value-of-template_0B074AF0">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B074AF0),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B074AF0"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B074AF0"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:AltAbbreviation">
																				<xsl:variable name="value-of-template_0B057898">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B057898),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B057898"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B057898"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:AltAbbreviation">
																				<xsl:variable name="value-of-template_0B060A50">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B060A50),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B060A50"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B060A50"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																<fo:block text-align="center">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:P">
																				<xsl:variable name="value-of-template_0B060430">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B060430),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B060430"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B060430"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:P) &gt; 0">
																					<xsl:for-each select="n1:P">
																						<xsl:variable name="value-of-template_0B0635D0">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0B0635D0),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0B0635D0"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0B0635D0"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:P">
																				<xsl:variable name="value-of-template_0B06A1D0">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B06A1D0),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B06A1D0"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B06A1D0"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:P">
																				<xsl:variable name="value-of-template_0B062E50">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B062E50),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B062E50"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B062E50"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:P">
																				<xsl:variable name="value-of-template_0B05CD00">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B05CD00),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B05CD00"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B05CD00"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																<fo:block text-align="center">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:C">
																				<xsl:variable name="value-of-template_080134E8">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_080134E8),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_080134E8"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_080134E8"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:C) &gt; 0">
																					<xsl:for-each select="n1:C">
																						<xsl:variable name="value-of-template_0B131130">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0B131130),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0B131130"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0B131130"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:C">
																				<xsl:variable name="value-of-template_0B057C28">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B057C28),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B057C28"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B057C28"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:C">
																				<xsl:variable name="value-of-template_0B05D288">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B05D288),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B05D288"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B05D288"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:C">
																				<xsl:variable name="value-of-template_06187250">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_06187250),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_06187250"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_06187250"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																<fo:block text-align="center">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:M">
																				<xsl:variable name="value-of-template_07FFA908">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_07FFA908),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_07FFA908"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_07FFA908"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:M) &gt; 0">
																					<xsl:for-each select="n1:M">
																						<xsl:variable name="value-of-template_0722F1A8">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0722F1A8),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0722F1A8"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0722F1A8"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:M">
																				<xsl:variable name="value-of-template_0AFC5988">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0AFC5988),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0AFC5988"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0AFC5988"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:M">
																				<xsl:variable name="value-of-template_07FF1A88">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_07FF1A88),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_07FF1A88"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_07FF1A88"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:M">
																				<xsl:variable name="value-of-template_0B12AD40">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B12AD40),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B12AD40"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B12AD40"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																<fo:block text-align="center">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:Q">
																				<xsl:variable name="value-of-template_07FEF030">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_07FEF030),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_07FEF030"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_07FEF030"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="string-length(n1:q) &gt; 0">
																					<xsl:for-each select="n1:Q">
																						<xsl:variable name="value-of-template_06B7ED40">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_06B7ED40),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_06B7ED40"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_06B7ED40"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:for-each select="n1:Q">
																				<xsl:variable name="value-of-template_06A9C8E8">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_06A9C8E8),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_06A9C8E8"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_06A9C8E8"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:Q">
																				<xsl:variable name="value-of-template_0813CA68">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0813CA68),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0813CA68"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0813CA68"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:Q">
																				<xsl:variable name="value-of-template_0B4AE360">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_0B4AE360),'&#x200B;')">
																						<fo:block>
																							<xsl:copy-of select="$value-of-template_0B4AE360"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:copy-of select="$value-of-template_0B4AE360"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
															<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:for-each select="n1:SDescription">
																				<xsl:for-each select="n1:SDescriptionDetails">
																					<xsl:for-each select="n1:SDescriptionRow">
																						<xsl:variable name="value-of-template_0B1059D8">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_0B1059D8),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_0B1059D8"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_0B1059D8"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																			<xsl:choose>
																				<xsl:when test="count(n1:SDescription/n1:SDescriptionDetails/n1:SDescriptionRow) &gt; 0">
																					<xsl:for-each select="n1:SDescription">
																						<xsl:for-each select="n1:SDescriptionDetails">
																							<xsl:for-each select="n1:SDescriptionRow">
																								<xsl:variable name="value-of-template_0852FEB8">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_0852FEB8),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_0852FEB8"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_0852FEB8"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:text>&#160;</xsl:text>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																			<xsl:choose>
																				<xsl:when test="count(n1:SDescription/n1:SDescriptionDetails/n1:SDescriptionRow) &gt; 0">
																					<xsl:for-each select="n1:SDescription">
																						<xsl:for-each select="n1:SDescriptionDetails">
																							<xsl:for-each select="n1:SDescriptionRow">
																								<xsl:variable name="value-of-template_0846FD30">
																									<xsl:apply-templates/>
																								</xsl:variable>
																								<xsl:choose>
																									<xsl:when test="contains(string($value-of-template_0846FD30),'&#x200B;')">
																										<fo:block>
																											<xsl:copy-of select="$value-of-template_0846FD30"/>
																										</fo:block>
																									</xsl:when>
																									<xsl:otherwise>
																										<fo:inline>
																											<xsl:copy-of select="$value-of-template_0846FD30"/>
																										</fo:inline>
																									</xsl:otherwise>
																								</xsl:choose>
																								<fo:block/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:when>
																				<xsl:otherwise/>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																			<xsl:for-each select="n1:SDescription">
																				<xsl:for-each select="n1:SDescriptionDetails">
																					<xsl:for-each select="n1:SDescriptionRow">
																						<xsl:variable name="value-of-template_06B6BCF0">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_06B6BCF0),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_06B6BCF0"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_06B6BCF0"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																			<xsl:for-each select="n1:SDescription">
																				<xsl:for-each select="n1:SDescriptionDetails">
																					<xsl:for-each select="n1:SDescriptionRow">
																						<xsl:variable name="value-of-template_06B8FC68">
																							<xsl:apply-templates/>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="contains(string($value-of-template_06B8FC68),'&#x200B;')">
																								<fo:block>
																									<xsl:copy-of select="$value-of-template_06B8FC68"/>
																								</fo:block>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:inline>
																									<xsl:copy-of select="$value-of-template_06B8FC68"/>
																								</fo:inline>
																							</xsl:otherwise>
																						</xsl:choose>
																						<fo:block/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
														</fo:table-row>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="string($altova:tablerows)">
													<xsl:copy-of select="$altova:tablerows"/>
												</xsl:when>
												<xsl:otherwise>
													<fo:table-row>
														<fo:table-cell>
															<fo:block/>
														</fo:table-cell>
													</fo:table-row>
												</xsl:otherwise>
											</xsl:choose>
										</fo:table-body>
									</fo:table>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:template>
	<xsl:template name="altova:double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
